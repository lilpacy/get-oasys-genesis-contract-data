/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers'
import type { Provider, TransactionRequest } from '@ethersproject/providers'
import type { PromiseOrValue } from '../../../common'
import type { Constants, ConstantsInterface } from '../../../contracts/lib/Constants'

const _abi = [
	{
		inputs: [],
		name: 'MAX_COMMISSION_RATE',
		outputs: [
			{
				internalType: 'uint256',
				name: '',
				type: 'uint256',
			},
		],
		stateMutability: 'view',
		type: 'function',
	},
	{
		inputs: [],
		name: 'MAX_REWARD_RATE',
		outputs: [
			{
				internalType: 'uint256',
				name: '',
				type: 'uint256',
			},
		],
		stateMutability: 'view',
		type: 'function',
	},
	{
		inputs: [],
		name: 'MIN_BLOCK_PERIOD',
		outputs: [
			{
				internalType: 'uint256',
				name: '',
				type: 'uint256',
			},
		],
		stateMutability: 'view',
		type: 'function',
	},
	{
		inputs: [],
		name: 'MIN_EPOCH_PERIOD',
		outputs: [
			{
				internalType: 'uint256',
				name: '',
				type: 'uint256',
			},
		],
		stateMutability: 'view',
		type: 'function',
	},
	{
		inputs: [],
		name: 'MIN_JAIL_PERIOD',
		outputs: [
			{
				internalType: 'uint256',
				name: '',
				type: 'uint256',
			},
		],
		stateMutability: 'view',
		type: 'function',
	},
	{
		inputs: [],
		name: 'MIN_JAIL_THRESHOLD',
		outputs: [
			{
				internalType: 'uint256',
				name: '',
				type: 'uint256',
			},
		],
		stateMutability: 'view',
		type: 'function',
	},
	{
		inputs: [],
		name: 'MIN_VALIDATOR_THRESHOLD',
		outputs: [
			{
				internalType: 'uint256',
				name: '',
				type: 'uint256',
			},
		],
		stateMutability: 'view',
		type: 'function',
	},
	{
		inputs: [],
		name: 'REWARD_PRECISION',
		outputs: [
			{
				internalType: 'uint256',
				name: '',
				type: 'uint256',
			},
		],
		stateMutability: 'view',
		type: 'function',
	},
	{
		inputs: [],
		name: 'SECONDS_PER_YEAR',
		outputs: [
			{
				internalType: 'uint256',
				name: '',
				type: 'uint256',
			},
		],
		stateMutability: 'view',
		type: 'function',
	},
]

const _bytecode =
	'0x61010561003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361060925760003560e01c80635e52aadc1160695780635e52aadc1460b0578063718dc3c3146097578063d8b654371460b0578063e6a69ab81460be578063f6cb1a491460c857600080fd5b8063207239c0146097578063331b8dd41460b05780633d6aa5e11460b75780634bb8e66e1460b0575b600080fd5b609e606481565b60405190815260200160405180910390f35b609e600181565b609e601981565b609e6301e1338081565b609e60038156fea264697066735822122009a5dd82b09f8e6d1938bac92ab88cc0dd3e9056c7159e7035a5c22999c5ec4164736f6c634300080c0033'

type ConstantsConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>

const isSuperArgs = (
	xs: ConstantsConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1

export class Constants__factory extends ContractFactory {
	constructor(...args: ConstantsConstructorParams) {
		if (isSuperArgs(args)) {
			super(...args)
		} else {
			super(_abi, _bytecode, args[0])
		}
	}

	override deploy(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<Constants> {
		return super.deploy(overrides || {}) as Promise<Constants>
	}
	override getDeployTransaction(
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): TransactionRequest {
		return super.getDeployTransaction(overrides || {})
	}
	override attach(address: string): Constants {
		return super.attach(address) as Constants
	}
	override connect(signer: Signer): Constants__factory {
		return super.connect(signer) as Constants__factory
	}

	static readonly bytecode = _bytecode
	static readonly abi = _abi
	static createInterface(): ConstantsInterface {
		return new utils.Interface(_abi) as ConstantsInterface
	}
	static connect(address: string, signerOrProvider: Signer | Provider): Constants {
		return new Contract(address, _abi, signerOrProvider) as Constants
	}
}
