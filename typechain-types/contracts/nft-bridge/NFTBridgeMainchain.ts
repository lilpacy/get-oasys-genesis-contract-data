/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
	BaseContract,
	BigNumber,
	BigNumberish,
	BytesLike,
	CallOverrides,
	ContractTransaction,
	Overrides,
	PopulatedTransaction,
	Signer,
	utils,
} from 'ethers'
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
	TypedEventFilter,
	TypedEvent,
	TypedListener,
	OnEvent,
	PromiseOrValue,
} from '../../common'

export declare namespace INFTBridgeMainchain {
	export type DepositInfoStruct = {
		mainchainERC721: PromiseOrValue<string>
		tokenId: PromiseOrValue<BigNumberish>
		mainFrom: PromiseOrValue<string>
		mainTo: PromiseOrValue<string>
	}

	export type DepositInfoStructOutput = [string, BigNumber, string, string] & {
		mainchainERC721: string
		tokenId: BigNumber
		mainFrom: string
		mainTo: string
	}
}

export interface NFTBridgeMainchainInterface extends utils.Interface {
	functions: {
		'deposit(address,uint256,uint256,address)': FunctionFragment
		'finalizeWithdrawal(uint256,uint256,uint256,uint256,address,address)': FunctionFragment
		'getDepositInfo(uint256)': FunctionFragment
		'owner()': FunctionFragment
		'rejectDeposit(uint256,uint256)': FunctionFragment
		'renounceOwnership()': FunctionFragment
		'transferMainchainRelayer(uint256,address)': FunctionFragment
		'transferOwnership(address)': FunctionFragment
	}

	getFunction(
		nameOrSignatureOrTopic:
			| 'deposit'
			| 'finalizeWithdrawal'
			| 'getDepositInfo'
			| 'owner'
			| 'rejectDeposit'
			| 'renounceOwnership'
			| 'transferMainchainRelayer'
			| 'transferOwnership',
	): FunctionFragment

	encodeFunctionData(
		functionFragment: 'deposit',
		values: [
			PromiseOrValue<string>,
			PromiseOrValue<BigNumberish>,
			PromiseOrValue<BigNumberish>,
			PromiseOrValue<string>,
		],
	): string
	encodeFunctionData(
		functionFragment: 'finalizeWithdrawal',
		values: [
			PromiseOrValue<BigNumberish>,
			PromiseOrValue<BigNumberish>,
			PromiseOrValue<BigNumberish>,
			PromiseOrValue<BigNumberish>,
			PromiseOrValue<string>,
			PromiseOrValue<string>,
		],
	): string
	encodeFunctionData(
		functionFragment: 'getDepositInfo',
		values: [PromiseOrValue<BigNumberish>],
	): string
	encodeFunctionData(functionFragment: 'owner', values?: undefined): string
	encodeFunctionData(
		functionFragment: 'rejectDeposit',
		values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
	): string
	encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string
	encodeFunctionData(
		functionFragment: 'transferMainchainRelayer',
		values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
	): string
	encodeFunctionData(
		functionFragment: 'transferOwnership',
		values: [PromiseOrValue<string>],
	): string

	decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'finalizeWithdrawal', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'getDepositInfo', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'rejectDeposit', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'transferMainchainRelayer', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result

	events: {
		'DepositInitiated(uint256,address,uint256,uint256,address,address)': EventFragment
		'DepositRejected(uint256)': EventFragment
		'OwnershipTransferred(address,address)': EventFragment
		'WithdrawalFailed(uint256,uint256,uint256,address,address,address)': EventFragment
		'WithdrawalFinalized(uint256,uint256,uint256,address,address,address)': EventFragment
	}

	getEvent(nameOrSignatureOrTopic: 'DepositInitiated'): EventFragment
	getEvent(nameOrSignatureOrTopic: 'DepositRejected'): EventFragment
	getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
	getEvent(nameOrSignatureOrTopic: 'WithdrawalFailed'): EventFragment
	getEvent(nameOrSignatureOrTopic: 'WithdrawalFinalized'): EventFragment
}

export interface DepositInitiatedEventObject {
	depositIndex: BigNumber
	mainchainERC721: string
	tokenId: BigNumber
	sidechainId: BigNumber
	mainFrom: string
	sideTo: string
}
export type DepositInitiatedEvent = TypedEvent<
	[BigNumber, string, BigNumber, BigNumber, string, string],
	DepositInitiatedEventObject
>

export type DepositInitiatedEventFilter = TypedEventFilter<DepositInitiatedEvent>

export interface DepositRejectedEventObject {
	depositIndex: BigNumber
}
export type DepositRejectedEvent = TypedEvent<[BigNumber], DepositRejectedEventObject>

export type DepositRejectedEventFilter = TypedEventFilter<DepositRejectedEvent>

export interface OwnershipTransferredEventObject {
	previousOwner: string
	newOwner: string
}
export type OwnershipTransferredEvent = TypedEvent<
	[string, string],
	OwnershipTransferredEventObject
>

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>

export interface WithdrawalFailedEventObject {
	depositIndex: BigNumber
	sidechainId: BigNumber
	withdrawalIndex: BigNumber
	mainchainERC721: string
	sideFrom: string
	mainTo: string
}
export type WithdrawalFailedEvent = TypedEvent<
	[BigNumber, BigNumber, BigNumber, string, string, string],
	WithdrawalFailedEventObject
>

export type WithdrawalFailedEventFilter = TypedEventFilter<WithdrawalFailedEvent>

export interface WithdrawalFinalizedEventObject {
	depositIndex: BigNumber
	sidechainId: BigNumber
	withdrawalIndex: BigNumber
	mainchainERC721: string
	sideFrom: string
	mainTo: string
}
export type WithdrawalFinalizedEvent = TypedEvent<
	[BigNumber, BigNumber, BigNumber, string, string, string],
	WithdrawalFinalizedEventObject
>

export type WithdrawalFinalizedEventFilter = TypedEventFilter<WithdrawalFinalizedEvent>

export interface NFTBridgeMainchain extends BaseContract {
	connect(signerOrProvider: Signer | Provider | string): this
	attach(addressOrName: string): this
	deployed(): Promise<this>

	interface: NFTBridgeMainchainInterface

	queryFilter<TEvent extends TypedEvent>(
		event: TypedEventFilter<TEvent>,
		fromBlockOrBlockhash?: string | number | undefined,
		toBlock?: string | number | undefined,
	): Promise<Array<TEvent>>

	listeners<TEvent extends TypedEvent>(
		eventFilter?: TypedEventFilter<TEvent>,
	): Array<TypedListener<TEvent>>
	listeners(eventName?: string): Array<Listener>
	removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
	removeAllListeners(eventName?: string): this
	off: OnEvent<this>
	on: OnEvent<this>
	once: OnEvent<this>
	removeListener: OnEvent<this>

	functions: {
		deposit(
			mainchainERC721: PromiseOrValue<string>,
			tokenId: PromiseOrValue<BigNumberish>,
			sidechainId: PromiseOrValue<BigNumberish>,
			sideTo: PromiseOrValue<string>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<ContractTransaction>

		finalizeWithdrawal(
			mainchainId: PromiseOrValue<BigNumberish>,
			depositIndex: PromiseOrValue<BigNumberish>,
			sidechainId: PromiseOrValue<BigNumberish>,
			withdrawalIndex: PromiseOrValue<BigNumberish>,
			sideFrom: PromiseOrValue<string>,
			mainTo: PromiseOrValue<string>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<ContractTransaction>

		getDepositInfo(
			depositIndex: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<[INFTBridgeMainchain.DepositInfoStructOutput]>

		owner(overrides?: CallOverrides): Promise<[string]>

		rejectDeposit(
			mainchainId: PromiseOrValue<BigNumberish>,
			depositIndex: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<ContractTransaction>

		renounceOwnership(
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<ContractTransaction>

		transferMainchainRelayer(
			mainchainId: PromiseOrValue<BigNumberish>,
			newRelayer: PromiseOrValue<string>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<ContractTransaction>

		transferOwnership(
			newOwner: PromiseOrValue<string>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<ContractTransaction>
	}

	deposit(
		mainchainERC721: PromiseOrValue<string>,
		tokenId: PromiseOrValue<BigNumberish>,
		sidechainId: PromiseOrValue<BigNumberish>,
		sideTo: PromiseOrValue<string>,
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): Promise<ContractTransaction>

	finalizeWithdrawal(
		mainchainId: PromiseOrValue<BigNumberish>,
		depositIndex: PromiseOrValue<BigNumberish>,
		sidechainId: PromiseOrValue<BigNumberish>,
		withdrawalIndex: PromiseOrValue<BigNumberish>,
		sideFrom: PromiseOrValue<string>,
		mainTo: PromiseOrValue<string>,
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): Promise<ContractTransaction>

	getDepositInfo(
		depositIndex: PromiseOrValue<BigNumberish>,
		overrides?: CallOverrides,
	): Promise<INFTBridgeMainchain.DepositInfoStructOutput>

	owner(overrides?: CallOverrides): Promise<string>

	rejectDeposit(
		mainchainId: PromiseOrValue<BigNumberish>,
		depositIndex: PromiseOrValue<BigNumberish>,
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): Promise<ContractTransaction>

	renounceOwnership(
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): Promise<ContractTransaction>

	transferMainchainRelayer(
		mainchainId: PromiseOrValue<BigNumberish>,
		newRelayer: PromiseOrValue<string>,
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): Promise<ContractTransaction>

	transferOwnership(
		newOwner: PromiseOrValue<string>,
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): Promise<ContractTransaction>

	callStatic: {
		deposit(
			mainchainERC721: PromiseOrValue<string>,
			tokenId: PromiseOrValue<BigNumberish>,
			sidechainId: PromiseOrValue<BigNumberish>,
			sideTo: PromiseOrValue<string>,
			overrides?: CallOverrides,
		): Promise<void>

		finalizeWithdrawal(
			mainchainId: PromiseOrValue<BigNumberish>,
			depositIndex: PromiseOrValue<BigNumberish>,
			sidechainId: PromiseOrValue<BigNumberish>,
			withdrawalIndex: PromiseOrValue<BigNumberish>,
			sideFrom: PromiseOrValue<string>,
			mainTo: PromiseOrValue<string>,
			overrides?: CallOverrides,
		): Promise<void>

		getDepositInfo(
			depositIndex: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<INFTBridgeMainchain.DepositInfoStructOutput>

		owner(overrides?: CallOverrides): Promise<string>

		rejectDeposit(
			mainchainId: PromiseOrValue<BigNumberish>,
			depositIndex: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<void>

		renounceOwnership(overrides?: CallOverrides): Promise<void>

		transferMainchainRelayer(
			mainchainId: PromiseOrValue<BigNumberish>,
			newRelayer: PromiseOrValue<string>,
			overrides?: CallOverrides,
		): Promise<void>

		transferOwnership(
			newOwner: PromiseOrValue<string>,
			overrides?: CallOverrides,
		): Promise<void>
	}

	filters: {
		'DepositInitiated(uint256,address,uint256,uint256,address,address)'(
			depositIndex?: PromiseOrValue<BigNumberish> | null,
			mainchainERC721?: PromiseOrValue<string> | null,
			tokenId?: PromiseOrValue<BigNumberish> | null,
			sidechainId?: null,
			mainFrom?: null,
			sideTo?: null,
		): DepositInitiatedEventFilter
		DepositInitiated(
			depositIndex?: PromiseOrValue<BigNumberish> | null,
			mainchainERC721?: PromiseOrValue<string> | null,
			tokenId?: PromiseOrValue<BigNumberish> | null,
			sidechainId?: null,
			mainFrom?: null,
			sideTo?: null,
		): DepositInitiatedEventFilter

		'DepositRejected(uint256)'(
			depositIndex?: PromiseOrValue<BigNumberish> | null,
		): DepositRejectedEventFilter
		DepositRejected(
			depositIndex?: PromiseOrValue<BigNumberish> | null,
		): DepositRejectedEventFilter

		'OwnershipTransferred(address,address)'(
			previousOwner?: PromiseOrValue<string> | null,
			newOwner?: PromiseOrValue<string> | null,
		): OwnershipTransferredEventFilter
		OwnershipTransferred(
			previousOwner?: PromiseOrValue<string> | null,
			newOwner?: PromiseOrValue<string> | null,
		): OwnershipTransferredEventFilter

		'WithdrawalFailed(uint256,uint256,uint256,address,address,address)'(
			depositIndex?: PromiseOrValue<BigNumberish> | null,
			sidechainId?: PromiseOrValue<BigNumberish> | null,
			withdrawalIndex?: PromiseOrValue<BigNumberish> | null,
			mainchainERC721?: null,
			sideFrom?: null,
			mainTo?: null,
		): WithdrawalFailedEventFilter
		WithdrawalFailed(
			depositIndex?: PromiseOrValue<BigNumberish> | null,
			sidechainId?: PromiseOrValue<BigNumberish> | null,
			withdrawalIndex?: PromiseOrValue<BigNumberish> | null,
			mainchainERC721?: null,
			sideFrom?: null,
			mainTo?: null,
		): WithdrawalFailedEventFilter

		'WithdrawalFinalized(uint256,uint256,uint256,address,address,address)'(
			depositIndex?: PromiseOrValue<BigNumberish> | null,
			sidechainId?: PromiseOrValue<BigNumberish> | null,
			withdrawalIndex?: PromiseOrValue<BigNumberish> | null,
			mainchainERC721?: null,
			sideFrom?: null,
			mainTo?: null,
		): WithdrawalFinalizedEventFilter
		WithdrawalFinalized(
			depositIndex?: PromiseOrValue<BigNumberish> | null,
			sidechainId?: PromiseOrValue<BigNumberish> | null,
			withdrawalIndex?: PromiseOrValue<BigNumberish> | null,
			mainchainERC721?: null,
			sideFrom?: null,
			mainTo?: null,
		): WithdrawalFinalizedEventFilter
	}

	estimateGas: {
		deposit(
			mainchainERC721: PromiseOrValue<string>,
			tokenId: PromiseOrValue<BigNumberish>,
			sidechainId: PromiseOrValue<BigNumberish>,
			sideTo: PromiseOrValue<string>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<BigNumber>

		finalizeWithdrawal(
			mainchainId: PromiseOrValue<BigNumberish>,
			depositIndex: PromiseOrValue<BigNumberish>,
			sidechainId: PromiseOrValue<BigNumberish>,
			withdrawalIndex: PromiseOrValue<BigNumberish>,
			sideFrom: PromiseOrValue<string>,
			mainTo: PromiseOrValue<string>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<BigNumber>

		getDepositInfo(
			depositIndex: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<BigNumber>

		owner(overrides?: CallOverrides): Promise<BigNumber>

		rejectDeposit(
			mainchainId: PromiseOrValue<BigNumberish>,
			depositIndex: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<BigNumber>

		renounceOwnership(
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<BigNumber>

		transferMainchainRelayer(
			mainchainId: PromiseOrValue<BigNumberish>,
			newRelayer: PromiseOrValue<string>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<BigNumber>

		transferOwnership(
			newOwner: PromiseOrValue<string>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<BigNumber>
	}

	populateTransaction: {
		deposit(
			mainchainERC721: PromiseOrValue<string>,
			tokenId: PromiseOrValue<BigNumberish>,
			sidechainId: PromiseOrValue<BigNumberish>,
			sideTo: PromiseOrValue<string>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<PopulatedTransaction>

		finalizeWithdrawal(
			mainchainId: PromiseOrValue<BigNumberish>,
			depositIndex: PromiseOrValue<BigNumberish>,
			sidechainId: PromiseOrValue<BigNumberish>,
			withdrawalIndex: PromiseOrValue<BigNumberish>,
			sideFrom: PromiseOrValue<string>,
			mainTo: PromiseOrValue<string>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<PopulatedTransaction>

		getDepositInfo(
			depositIndex: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<PopulatedTransaction>

		owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

		rejectDeposit(
			mainchainId: PromiseOrValue<BigNumberish>,
			depositIndex: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<PopulatedTransaction>

		renounceOwnership(
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<PopulatedTransaction>

		transferMainchainRelayer(
			mainchainId: PromiseOrValue<BigNumberish>,
			newRelayer: PromiseOrValue<string>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<PopulatedTransaction>

		transferOwnership(
			newOwner: PromiseOrValue<string>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<PopulatedTransaction>
	}
}
