/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
	BaseContract,
	BigNumber,
	BigNumberish,
	BytesLike,
	CallOverrides,
	ContractTransaction,
	Overrides,
	PopulatedTransaction,
	Signer,
	utils,
} from 'ethers'
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
	TypedEventFilter,
	TypedEvent,
	TypedListener,
	OnEvent,
	PromiseOrValue,
} from '../../common'

export declare namespace INFTBridgeSidechain {
	export type WithdrawalInfoStruct = {
		sidechainERC721: PromiseOrValue<string>
		tokenId: PromiseOrValue<BigNumberish>
		sideFrom: PromiseOrValue<string>
		rejected: PromiseOrValue<boolean>
	}

	export type WithdrawalInfoStructOutput = [string, BigNumber, string, boolean] & {
		sidechainERC721: string
		tokenId: BigNumber
		sideFrom: string
		rejected: boolean
	}
}

export interface NFTBridgeSidechainInterface extends utils.Interface {
	functions: {
		'createSidechainERC721(uint256,uint256,address,string,string)': FunctionFragment
		'finalizeDeposit(uint256,uint256,uint256,address,uint256,address,address)': FunctionFragment
		'getSidechainERC721(uint256,address)': FunctionFragment
		'getWithdrawalInfo(uint256)': FunctionFragment
		'owner()': FunctionFragment
		'rejectWithdrawal(uint256,uint256)': FunctionFragment
		'renounceOwnership()': FunctionFragment
		'transferOwnership(address)': FunctionFragment
		'transferSidechainRelayer(uint256,address)': FunctionFragment
		'withdraw(address,uint256,address)': FunctionFragment
	}

	getFunction(
		nameOrSignatureOrTopic:
			| 'createSidechainERC721'
			| 'finalizeDeposit'
			| 'getSidechainERC721'
			| 'getWithdrawalInfo'
			| 'owner'
			| 'rejectWithdrawal'
			| 'renounceOwnership'
			| 'transferOwnership'
			| 'transferSidechainRelayer'
			| 'withdraw',
	): FunctionFragment

	encodeFunctionData(
		functionFragment: 'createSidechainERC721',
		values: [
			PromiseOrValue<BigNumberish>,
			PromiseOrValue<BigNumberish>,
			PromiseOrValue<string>,
			PromiseOrValue<string>,
			PromiseOrValue<string>,
		],
	): string
	encodeFunctionData(
		functionFragment: 'finalizeDeposit',
		values: [
			PromiseOrValue<BigNumberish>,
			PromiseOrValue<BigNumberish>,
			PromiseOrValue<BigNumberish>,
			PromiseOrValue<string>,
			PromiseOrValue<BigNumberish>,
			PromiseOrValue<string>,
			PromiseOrValue<string>,
		],
	): string
	encodeFunctionData(
		functionFragment: 'getSidechainERC721',
		values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
	): string
	encodeFunctionData(
		functionFragment: 'getWithdrawalInfo',
		values: [PromiseOrValue<BigNumberish>],
	): string
	encodeFunctionData(functionFragment: 'owner', values?: undefined): string
	encodeFunctionData(
		functionFragment: 'rejectWithdrawal',
		values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
	): string
	encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string
	encodeFunctionData(
		functionFragment: 'transferOwnership',
		values: [PromiseOrValue<string>],
	): string
	encodeFunctionData(
		functionFragment: 'transferSidechainRelayer',
		values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
	): string
	encodeFunctionData(
		functionFragment: 'withdraw',
		values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
	): string

	decodeFunctionResult(functionFragment: 'createSidechainERC721', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'finalizeDeposit', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'getSidechainERC721', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'getWithdrawalInfo', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'rejectWithdrawal', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'transferSidechainRelayer', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result

	events: {
		'DepositFailed(uint256,uint256,address,address,uint256,address,address)': EventFragment
		'DepositFinalized(uint256,uint256,address,address,uint256,address,address)': EventFragment
		'OwnershipTransferred(address,address)': EventFragment
		'SidechainERC721Created(uint256,address,address,string,string)': EventFragment
		'WithdrawalInitiated(uint256,uint256,uint256,address,address,uint256,address,address)': EventFragment
		'WithdrawalRejected(uint256,uint256,uint256)': EventFragment
	}

	getEvent(nameOrSignatureOrTopic: 'DepositFailed'): EventFragment
	getEvent(nameOrSignatureOrTopic: 'DepositFinalized'): EventFragment
	getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
	getEvent(nameOrSignatureOrTopic: 'SidechainERC721Created'): EventFragment
	getEvent(nameOrSignatureOrTopic: 'WithdrawalInitiated'): EventFragment
	getEvent(nameOrSignatureOrTopic: 'WithdrawalRejected'): EventFragment
}

export interface DepositFailedEventObject {
	mainchainId: BigNumber
	depositIndex: BigNumber
	mainchainERC721: string
	sidechainERC721: string
	tokenId: BigNumber
	mainFrom: string
	sideTo: string
}
export type DepositFailedEvent = TypedEvent<
	[BigNumber, BigNumber, string, string, BigNumber, string, string],
	DepositFailedEventObject
>

export type DepositFailedEventFilter = TypedEventFilter<DepositFailedEvent>

export interface DepositFinalizedEventObject {
	mainchainId: BigNumber
	depositIndex: BigNumber
	mainchainERC721: string
	sidechainERC721: string
	tokenId: BigNumber
	mainFrom: string
	sideTo: string
}
export type DepositFinalizedEvent = TypedEvent<
	[BigNumber, BigNumber, string, string, BigNumber, string, string],
	DepositFinalizedEventObject
>

export type DepositFinalizedEventFilter = TypedEventFilter<DepositFinalizedEvent>

export interface OwnershipTransferredEventObject {
	previousOwner: string
	newOwner: string
}
export type OwnershipTransferredEvent = TypedEvent<
	[string, string],
	OwnershipTransferredEventObject
>

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>

export interface SidechainERC721CreatedEventObject {
	mainchainId: BigNumber
	mainchainERC721: string
	sidechainERC721: string
	name: string
	symbol: string
}
export type SidechainERC721CreatedEvent = TypedEvent<
	[BigNumber, string, string, string, string],
	SidechainERC721CreatedEventObject
>

export type SidechainERC721CreatedEventFilter = TypedEventFilter<SidechainERC721CreatedEvent>

export interface WithdrawalInitiatedEventObject {
	withdrawalIndex: BigNumber
	mainchainId: BigNumber
	depositIndex: BigNumber
	mainchainERC721: string
	sidechainERC721: string
	tokenId: BigNumber
	sideFrom: string
	mainTo: string
}
export type WithdrawalInitiatedEvent = TypedEvent<
	[BigNumber, BigNumber, BigNumber, string, string, BigNumber, string, string],
	WithdrawalInitiatedEventObject
>

export type WithdrawalInitiatedEventFilter = TypedEventFilter<WithdrawalInitiatedEvent>

export interface WithdrawalRejectedEventObject {
	withdrawalIndex: BigNumber
	mainchainId: BigNumber
	depositIndex: BigNumber
}
export type WithdrawalRejectedEvent = TypedEvent<
	[BigNumber, BigNumber, BigNumber],
	WithdrawalRejectedEventObject
>

export type WithdrawalRejectedEventFilter = TypedEventFilter<WithdrawalRejectedEvent>

export interface NFTBridgeSidechain extends BaseContract {
	connect(signerOrProvider: Signer | Provider | string): this
	attach(addressOrName: string): this
	deployed(): Promise<this>

	interface: NFTBridgeSidechainInterface

	queryFilter<TEvent extends TypedEvent>(
		event: TypedEventFilter<TEvent>,
		fromBlockOrBlockhash?: string | number | undefined,
		toBlock?: string | number | undefined,
	): Promise<Array<TEvent>>

	listeners<TEvent extends TypedEvent>(
		eventFilter?: TypedEventFilter<TEvent>,
	): Array<TypedListener<TEvent>>
	listeners(eventName?: string): Array<Listener>
	removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
	removeAllListeners(eventName?: string): this
	off: OnEvent<this>
	on: OnEvent<this>
	once: OnEvent<this>
	removeListener: OnEvent<this>

	functions: {
		createSidechainERC721(
			sidechainId: PromiseOrValue<BigNumberish>,
			mainchainId: PromiseOrValue<BigNumberish>,
			mainchainERC721: PromiseOrValue<string>,
			name: PromiseOrValue<string>,
			symbol: PromiseOrValue<string>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<ContractTransaction>

		finalizeDeposit(
			sidechainId: PromiseOrValue<BigNumberish>,
			mainchainId: PromiseOrValue<BigNumberish>,
			depositIndex: PromiseOrValue<BigNumberish>,
			mainchainERC721: PromiseOrValue<string>,
			tokenId: PromiseOrValue<BigNumberish>,
			mainFrom: PromiseOrValue<string>,
			sideTo: PromiseOrValue<string>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<ContractTransaction>

		getSidechainERC721(
			mainchainId: PromiseOrValue<BigNumberish>,
			mainchainERC721: PromiseOrValue<string>,
			overrides?: CallOverrides,
		): Promise<[string]>

		getWithdrawalInfo(
			withdrawalIndex: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<[INFTBridgeSidechain.WithdrawalInfoStructOutput]>

		owner(overrides?: CallOverrides): Promise<[string]>

		rejectWithdrawal(
			sidechainId: PromiseOrValue<BigNumberish>,
			withdrawalIndex: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<ContractTransaction>

		renounceOwnership(
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<ContractTransaction>

		transferOwnership(
			newOwner: PromiseOrValue<string>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<ContractTransaction>

		transferSidechainRelayer(
			sidechainId: PromiseOrValue<BigNumberish>,
			newRelayer: PromiseOrValue<string>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<ContractTransaction>

		withdraw(
			sidechainERC721: PromiseOrValue<string>,
			tokenId: PromiseOrValue<BigNumberish>,
			mainTo: PromiseOrValue<string>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<ContractTransaction>
	}

	createSidechainERC721(
		sidechainId: PromiseOrValue<BigNumberish>,
		mainchainId: PromiseOrValue<BigNumberish>,
		mainchainERC721: PromiseOrValue<string>,
		name: PromiseOrValue<string>,
		symbol: PromiseOrValue<string>,
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): Promise<ContractTransaction>

	finalizeDeposit(
		sidechainId: PromiseOrValue<BigNumberish>,
		mainchainId: PromiseOrValue<BigNumberish>,
		depositIndex: PromiseOrValue<BigNumberish>,
		mainchainERC721: PromiseOrValue<string>,
		tokenId: PromiseOrValue<BigNumberish>,
		mainFrom: PromiseOrValue<string>,
		sideTo: PromiseOrValue<string>,
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): Promise<ContractTransaction>

	getSidechainERC721(
		mainchainId: PromiseOrValue<BigNumberish>,
		mainchainERC721: PromiseOrValue<string>,
		overrides?: CallOverrides,
	): Promise<string>

	getWithdrawalInfo(
		withdrawalIndex: PromiseOrValue<BigNumberish>,
		overrides?: CallOverrides,
	): Promise<INFTBridgeSidechain.WithdrawalInfoStructOutput>

	owner(overrides?: CallOverrides): Promise<string>

	rejectWithdrawal(
		sidechainId: PromiseOrValue<BigNumberish>,
		withdrawalIndex: PromiseOrValue<BigNumberish>,
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): Promise<ContractTransaction>

	renounceOwnership(
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): Promise<ContractTransaction>

	transferOwnership(
		newOwner: PromiseOrValue<string>,
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): Promise<ContractTransaction>

	transferSidechainRelayer(
		sidechainId: PromiseOrValue<BigNumberish>,
		newRelayer: PromiseOrValue<string>,
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): Promise<ContractTransaction>

	withdraw(
		sidechainERC721: PromiseOrValue<string>,
		tokenId: PromiseOrValue<BigNumberish>,
		mainTo: PromiseOrValue<string>,
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): Promise<ContractTransaction>

	callStatic: {
		createSidechainERC721(
			sidechainId: PromiseOrValue<BigNumberish>,
			mainchainId: PromiseOrValue<BigNumberish>,
			mainchainERC721: PromiseOrValue<string>,
			name: PromiseOrValue<string>,
			symbol: PromiseOrValue<string>,
			overrides?: CallOverrides,
		): Promise<void>

		finalizeDeposit(
			sidechainId: PromiseOrValue<BigNumberish>,
			mainchainId: PromiseOrValue<BigNumberish>,
			depositIndex: PromiseOrValue<BigNumberish>,
			mainchainERC721: PromiseOrValue<string>,
			tokenId: PromiseOrValue<BigNumberish>,
			mainFrom: PromiseOrValue<string>,
			sideTo: PromiseOrValue<string>,
			overrides?: CallOverrides,
		): Promise<void>

		getSidechainERC721(
			mainchainId: PromiseOrValue<BigNumberish>,
			mainchainERC721: PromiseOrValue<string>,
			overrides?: CallOverrides,
		): Promise<string>

		getWithdrawalInfo(
			withdrawalIndex: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<INFTBridgeSidechain.WithdrawalInfoStructOutput>

		owner(overrides?: CallOverrides): Promise<string>

		rejectWithdrawal(
			sidechainId: PromiseOrValue<BigNumberish>,
			withdrawalIndex: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<void>

		renounceOwnership(overrides?: CallOverrides): Promise<void>

		transferOwnership(
			newOwner: PromiseOrValue<string>,
			overrides?: CallOverrides,
		): Promise<void>

		transferSidechainRelayer(
			sidechainId: PromiseOrValue<BigNumberish>,
			newRelayer: PromiseOrValue<string>,
			overrides?: CallOverrides,
		): Promise<void>

		withdraw(
			sidechainERC721: PromiseOrValue<string>,
			tokenId: PromiseOrValue<BigNumberish>,
			mainTo: PromiseOrValue<string>,
			overrides?: CallOverrides,
		): Promise<void>
	}

	filters: {
		'DepositFailed(uint256,uint256,address,address,uint256,address,address)'(
			mainchainId?: PromiseOrValue<BigNumberish> | null,
			depositIndex?: PromiseOrValue<BigNumberish> | null,
			mainchainERC721?: null,
			sidechainERC721?: null,
			tokenId?: null,
			mainFrom?: null,
			sideTo?: null,
		): DepositFailedEventFilter
		DepositFailed(
			mainchainId?: PromiseOrValue<BigNumberish> | null,
			depositIndex?: PromiseOrValue<BigNumberish> | null,
			mainchainERC721?: null,
			sidechainERC721?: null,
			tokenId?: null,
			mainFrom?: null,
			sideTo?: null,
		): DepositFailedEventFilter

		'DepositFinalized(uint256,uint256,address,address,uint256,address,address)'(
			mainchainId?: PromiseOrValue<BigNumberish> | null,
			depositIndex?: PromiseOrValue<BigNumberish> | null,
			mainchainERC721?: null,
			sidechainERC721?: null,
			tokenId?: null,
			mainFrom?: null,
			sideTo?: null,
		): DepositFinalizedEventFilter
		DepositFinalized(
			mainchainId?: PromiseOrValue<BigNumberish> | null,
			depositIndex?: PromiseOrValue<BigNumberish> | null,
			mainchainERC721?: null,
			sidechainERC721?: null,
			tokenId?: null,
			mainFrom?: null,
			sideTo?: null,
		): DepositFinalizedEventFilter

		'OwnershipTransferred(address,address)'(
			previousOwner?: PromiseOrValue<string> | null,
			newOwner?: PromiseOrValue<string> | null,
		): OwnershipTransferredEventFilter
		OwnershipTransferred(
			previousOwner?: PromiseOrValue<string> | null,
			newOwner?: PromiseOrValue<string> | null,
		): OwnershipTransferredEventFilter

		'SidechainERC721Created(uint256,address,address,string,string)'(
			mainchainId?: PromiseOrValue<BigNumberish> | null,
			mainchainERC721?: PromiseOrValue<string> | null,
			sidechainERC721?: null,
			name?: null,
			symbol?: null,
		): SidechainERC721CreatedEventFilter
		SidechainERC721Created(
			mainchainId?: PromiseOrValue<BigNumberish> | null,
			mainchainERC721?: PromiseOrValue<string> | null,
			sidechainERC721?: null,
			name?: null,
			symbol?: null,
		): SidechainERC721CreatedEventFilter

		'WithdrawalInitiated(uint256,uint256,uint256,address,address,uint256,address,address)'(
			withdrawalIndex?: PromiseOrValue<BigNumberish> | null,
			mainchainId?: PromiseOrValue<BigNumberish> | null,
			depositIndex?: PromiseOrValue<BigNumberish> | null,
			mainchainERC721?: null,
			sidechainERC721?: null,
			tokenId?: null,
			sideFrom?: null,
			mainTo?: null,
		): WithdrawalInitiatedEventFilter
		WithdrawalInitiated(
			withdrawalIndex?: PromiseOrValue<BigNumberish> | null,
			mainchainId?: PromiseOrValue<BigNumberish> | null,
			depositIndex?: PromiseOrValue<BigNumberish> | null,
			mainchainERC721?: null,
			sidechainERC721?: null,
			tokenId?: null,
			sideFrom?: null,
			mainTo?: null,
		): WithdrawalInitiatedEventFilter

		'WithdrawalRejected(uint256,uint256,uint256)'(
			withdrawalIndex?: PromiseOrValue<BigNumberish> | null,
			mainchainId?: PromiseOrValue<BigNumberish> | null,
			depositIndex?: PromiseOrValue<BigNumberish> | null,
		): WithdrawalRejectedEventFilter
		WithdrawalRejected(
			withdrawalIndex?: PromiseOrValue<BigNumberish> | null,
			mainchainId?: PromiseOrValue<BigNumberish> | null,
			depositIndex?: PromiseOrValue<BigNumberish> | null,
		): WithdrawalRejectedEventFilter
	}

	estimateGas: {
		createSidechainERC721(
			sidechainId: PromiseOrValue<BigNumberish>,
			mainchainId: PromiseOrValue<BigNumberish>,
			mainchainERC721: PromiseOrValue<string>,
			name: PromiseOrValue<string>,
			symbol: PromiseOrValue<string>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<BigNumber>

		finalizeDeposit(
			sidechainId: PromiseOrValue<BigNumberish>,
			mainchainId: PromiseOrValue<BigNumberish>,
			depositIndex: PromiseOrValue<BigNumberish>,
			mainchainERC721: PromiseOrValue<string>,
			tokenId: PromiseOrValue<BigNumberish>,
			mainFrom: PromiseOrValue<string>,
			sideTo: PromiseOrValue<string>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<BigNumber>

		getSidechainERC721(
			mainchainId: PromiseOrValue<BigNumberish>,
			mainchainERC721: PromiseOrValue<string>,
			overrides?: CallOverrides,
		): Promise<BigNumber>

		getWithdrawalInfo(
			withdrawalIndex: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<BigNumber>

		owner(overrides?: CallOverrides): Promise<BigNumber>

		rejectWithdrawal(
			sidechainId: PromiseOrValue<BigNumberish>,
			withdrawalIndex: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<BigNumber>

		renounceOwnership(
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<BigNumber>

		transferOwnership(
			newOwner: PromiseOrValue<string>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<BigNumber>

		transferSidechainRelayer(
			sidechainId: PromiseOrValue<BigNumberish>,
			newRelayer: PromiseOrValue<string>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<BigNumber>

		withdraw(
			sidechainERC721: PromiseOrValue<string>,
			tokenId: PromiseOrValue<BigNumberish>,
			mainTo: PromiseOrValue<string>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<BigNumber>
	}

	populateTransaction: {
		createSidechainERC721(
			sidechainId: PromiseOrValue<BigNumberish>,
			mainchainId: PromiseOrValue<BigNumberish>,
			mainchainERC721: PromiseOrValue<string>,
			name: PromiseOrValue<string>,
			symbol: PromiseOrValue<string>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<PopulatedTransaction>

		finalizeDeposit(
			sidechainId: PromiseOrValue<BigNumberish>,
			mainchainId: PromiseOrValue<BigNumberish>,
			depositIndex: PromiseOrValue<BigNumberish>,
			mainchainERC721: PromiseOrValue<string>,
			tokenId: PromiseOrValue<BigNumberish>,
			mainFrom: PromiseOrValue<string>,
			sideTo: PromiseOrValue<string>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<PopulatedTransaction>

		getSidechainERC721(
			mainchainId: PromiseOrValue<BigNumberish>,
			mainchainERC721: PromiseOrValue<string>,
			overrides?: CallOverrides,
		): Promise<PopulatedTransaction>

		getWithdrawalInfo(
			withdrawalIndex: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<PopulatedTransaction>

		owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

		rejectWithdrawal(
			sidechainId: PromiseOrValue<BigNumberish>,
			withdrawalIndex: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<PopulatedTransaction>

		renounceOwnership(
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<PopulatedTransaction>

		transferOwnership(
			newOwner: PromiseOrValue<string>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<PopulatedTransaction>

		transferSidechainRelayer(
			sidechainId: PromiseOrValue<BigNumberish>,
			newRelayer: PromiseOrValue<string>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<PopulatedTransaction>

		withdraw(
			sidechainERC721: PromiseOrValue<string>,
			tokenId: PromiseOrValue<BigNumberish>,
			mainTo: PromiseOrValue<string>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<PopulatedTransaction>
	}
}
