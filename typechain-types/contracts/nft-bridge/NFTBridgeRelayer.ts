/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
	BaseContract,
	BigNumber,
	BigNumberish,
	BytesLike,
	CallOverrides,
	ContractTransaction,
	Overrides,
	PopulatedTransaction,
	Signer,
	utils,
} from 'ethers'
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
	TypedEventFilter,
	TypedEvent,
	TypedListener,
	OnEvent,
	PromiseOrValue,
} from '../../common'

export interface NFTBridgeRelayerInterface extends utils.Interface {
	functions: {
		'addSigner(address,uint64,bytes)': FunctionFragment
		'createSidechainERC721(uint256,uint256,address,string,string,uint64,bytes)': FunctionFragment
		'finalizeDeposit(uint256,uint256,uint256,address,uint256,address,address,uint64,bytes)': FunctionFragment
		'finalizeWithdrawal(uint256,uint256,uint256,uint256,address,address,uint64,bytes)': FunctionFragment
		'getSigners()': FunctionFragment
		'mainchainBridge()': FunctionFragment
		'nonce()': FunctionFragment
		'rejectDeposit(uint256,uint256,uint64,bytes)': FunctionFragment
		'rejectWithdrawal(uint256,uint256,uint64,bytes)': FunctionFragment
		'removeSigner(address,uint64,bytes)': FunctionFragment
		'sidechainBridge()': FunctionFragment
		'threshold()': FunctionFragment
		'transferMainchainRelayer(uint256,address,uint64,bytes)': FunctionFragment
		'transferSidechainRelayer(uint256,address,uint64,bytes)': FunctionFragment
		'updateThreshold(uint256,uint64,bytes)': FunctionFragment
		'verifySignatures(bytes32,uint64,bytes)': FunctionFragment
	}

	getFunction(
		nameOrSignatureOrTopic:
			| 'addSigner'
			| 'createSidechainERC721'
			| 'finalizeDeposit'
			| 'finalizeWithdrawal'
			| 'getSigners'
			| 'mainchainBridge'
			| 'nonce'
			| 'rejectDeposit'
			| 'rejectWithdrawal'
			| 'removeSigner'
			| 'sidechainBridge'
			| 'threshold'
			| 'transferMainchainRelayer'
			| 'transferSidechainRelayer'
			| 'updateThreshold'
			| 'verifySignatures',
	): FunctionFragment

	encodeFunctionData(
		functionFragment: 'addSigner',
		values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>],
	): string
	encodeFunctionData(
		functionFragment: 'createSidechainERC721',
		values: [
			PromiseOrValue<BigNumberish>,
			PromiseOrValue<BigNumberish>,
			PromiseOrValue<string>,
			PromiseOrValue<string>,
			PromiseOrValue<string>,
			PromiseOrValue<BigNumberish>,
			PromiseOrValue<BytesLike>,
		],
	): string
	encodeFunctionData(
		functionFragment: 'finalizeDeposit',
		values: [
			PromiseOrValue<BigNumberish>,
			PromiseOrValue<BigNumberish>,
			PromiseOrValue<BigNumberish>,
			PromiseOrValue<string>,
			PromiseOrValue<BigNumberish>,
			PromiseOrValue<string>,
			PromiseOrValue<string>,
			PromiseOrValue<BigNumberish>,
			PromiseOrValue<BytesLike>,
		],
	): string
	encodeFunctionData(
		functionFragment: 'finalizeWithdrawal',
		values: [
			PromiseOrValue<BigNumberish>,
			PromiseOrValue<BigNumberish>,
			PromiseOrValue<BigNumberish>,
			PromiseOrValue<BigNumberish>,
			PromiseOrValue<string>,
			PromiseOrValue<string>,
			PromiseOrValue<BigNumberish>,
			PromiseOrValue<BytesLike>,
		],
	): string
	encodeFunctionData(functionFragment: 'getSigners', values?: undefined): string
	encodeFunctionData(functionFragment: 'mainchainBridge', values?: undefined): string
	encodeFunctionData(functionFragment: 'nonce', values?: undefined): string
	encodeFunctionData(
		functionFragment: 'rejectDeposit',
		values: [
			PromiseOrValue<BigNumberish>,
			PromiseOrValue<BigNumberish>,
			PromiseOrValue<BigNumberish>,
			PromiseOrValue<BytesLike>,
		],
	): string
	encodeFunctionData(
		functionFragment: 'rejectWithdrawal',
		values: [
			PromiseOrValue<BigNumberish>,
			PromiseOrValue<BigNumberish>,
			PromiseOrValue<BigNumberish>,
			PromiseOrValue<BytesLike>,
		],
	): string
	encodeFunctionData(
		functionFragment: 'removeSigner',
		values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>],
	): string
	encodeFunctionData(functionFragment: 'sidechainBridge', values?: undefined): string
	encodeFunctionData(functionFragment: 'threshold', values?: undefined): string
	encodeFunctionData(
		functionFragment: 'transferMainchainRelayer',
		values: [
			PromiseOrValue<BigNumberish>,
			PromiseOrValue<string>,
			PromiseOrValue<BigNumberish>,
			PromiseOrValue<BytesLike>,
		],
	): string
	encodeFunctionData(
		functionFragment: 'transferSidechainRelayer',
		values: [
			PromiseOrValue<BigNumberish>,
			PromiseOrValue<string>,
			PromiseOrValue<BigNumberish>,
			PromiseOrValue<BytesLike>,
		],
	): string
	encodeFunctionData(
		functionFragment: 'updateThreshold',
		values: [
			PromiseOrValue<BigNumberish>,
			PromiseOrValue<BigNumberish>,
			PromiseOrValue<BytesLike>,
		],
	): string
	encodeFunctionData(
		functionFragment: 'verifySignatures',
		values: [
			PromiseOrValue<BytesLike>,
			PromiseOrValue<BigNumberish>,
			PromiseOrValue<BytesLike>,
		],
	): string

	decodeFunctionResult(functionFragment: 'addSigner', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'createSidechainERC721', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'finalizeDeposit', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'finalizeWithdrawal', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'getSigners', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'mainchainBridge', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'nonce', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'rejectDeposit', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'rejectWithdrawal', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'removeSigner', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'sidechainBridge', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'threshold', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'transferMainchainRelayer', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'transferSidechainRelayer', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'updateThreshold', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'verifySignatures', data: BytesLike): Result

	events: {
		'SignerAdded(address)': EventFragment
		'SignerRemoved(address)': EventFragment
		'ThresholdUpdated(uint256)': EventFragment
	}

	getEvent(nameOrSignatureOrTopic: 'SignerAdded'): EventFragment
	getEvent(nameOrSignatureOrTopic: 'SignerRemoved'): EventFragment
	getEvent(nameOrSignatureOrTopic: 'ThresholdUpdated'): EventFragment
}

export interface SignerAddedEventObject {
	_address: string
}
export type SignerAddedEvent = TypedEvent<[string], SignerAddedEventObject>

export type SignerAddedEventFilter = TypedEventFilter<SignerAddedEvent>

export interface SignerRemovedEventObject {
	_address: string
}
export type SignerRemovedEvent = TypedEvent<[string], SignerRemovedEventObject>

export type SignerRemovedEventFilter = TypedEventFilter<SignerRemovedEvent>

export interface ThresholdUpdatedEventObject {
	_threshold: BigNumber
}
export type ThresholdUpdatedEvent = TypedEvent<[BigNumber], ThresholdUpdatedEventObject>

export type ThresholdUpdatedEventFilter = TypedEventFilter<ThresholdUpdatedEvent>

export interface NFTBridgeRelayer extends BaseContract {
	connect(signerOrProvider: Signer | Provider | string): this
	attach(addressOrName: string): this
	deployed(): Promise<this>

	interface: NFTBridgeRelayerInterface

	queryFilter<TEvent extends TypedEvent>(
		event: TypedEventFilter<TEvent>,
		fromBlockOrBlockhash?: string | number | undefined,
		toBlock?: string | number | undefined,
	): Promise<Array<TEvent>>

	listeners<TEvent extends TypedEvent>(
		eventFilter?: TypedEventFilter<TEvent>,
	): Array<TypedListener<TEvent>>
	listeners(eventName?: string): Array<Listener>
	removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
	removeAllListeners(eventName?: string): this
	off: OnEvent<this>
	on: OnEvent<this>
	once: OnEvent<this>
	removeListener: OnEvent<this>

	functions: {
		addSigner(
			_address: PromiseOrValue<string>,
			expiration: PromiseOrValue<BigNumberish>,
			signatures: PromiseOrValue<BytesLike>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<ContractTransaction>

		createSidechainERC721(
			sidechainId: PromiseOrValue<BigNumberish>,
			mainchainId: PromiseOrValue<BigNumberish>,
			mainERC721: PromiseOrValue<string>,
			name: PromiseOrValue<string>,
			symbol: PromiseOrValue<string>,
			expiration: PromiseOrValue<BigNumberish>,
			signatures: PromiseOrValue<BytesLike>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<ContractTransaction>

		finalizeDeposit(
			sidechainId: PromiseOrValue<BigNumberish>,
			mainchainId: PromiseOrValue<BigNumberish>,
			depositIndex: PromiseOrValue<BigNumberish>,
			mainERC721: PromiseOrValue<string>,
			tokenId: PromiseOrValue<BigNumberish>,
			mainFrom: PromiseOrValue<string>,
			sideTo: PromiseOrValue<string>,
			expiration: PromiseOrValue<BigNumberish>,
			signatures: PromiseOrValue<BytesLike>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<ContractTransaction>

		finalizeWithdrawal(
			mainchainId: PromiseOrValue<BigNumberish>,
			depositIndex: PromiseOrValue<BigNumberish>,
			sidechainId: PromiseOrValue<BigNumberish>,
			withdrawalIndex: PromiseOrValue<BigNumberish>,
			sideFrom: PromiseOrValue<string>,
			mainTo: PromiseOrValue<string>,
			expiration: PromiseOrValue<BigNumberish>,
			signatures: PromiseOrValue<BytesLike>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<ContractTransaction>

		getSigners(overrides?: CallOverrides): Promise<[string[]]>

		mainchainBridge(overrides?: CallOverrides): Promise<[string]>

		nonce(overrides?: CallOverrides): Promise<[BigNumber]>

		rejectDeposit(
			mainchainId: PromiseOrValue<BigNumberish>,
			depositIndex: PromiseOrValue<BigNumberish>,
			expiration: PromiseOrValue<BigNumberish>,
			signatures: PromiseOrValue<BytesLike>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<ContractTransaction>

		rejectWithdrawal(
			sidechainId: PromiseOrValue<BigNumberish>,
			withdrawalIndex: PromiseOrValue<BigNumberish>,
			expiration: PromiseOrValue<BigNumberish>,
			signatures: PromiseOrValue<BytesLike>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<ContractTransaction>

		removeSigner(
			_address: PromiseOrValue<string>,
			expiration: PromiseOrValue<BigNumberish>,
			signatures: PromiseOrValue<BytesLike>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<ContractTransaction>

		sidechainBridge(overrides?: CallOverrides): Promise<[string]>

		threshold(overrides?: CallOverrides): Promise<[BigNumber]>

		transferMainchainRelayer(
			mainchainId: PromiseOrValue<BigNumberish>,
			newRelayer: PromiseOrValue<string>,
			expiration: PromiseOrValue<BigNumberish>,
			signatures: PromiseOrValue<BytesLike>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<ContractTransaction>

		transferSidechainRelayer(
			sidechainId: PromiseOrValue<BigNumberish>,
			newRelayer: PromiseOrValue<string>,
			expiration: PromiseOrValue<BigNumberish>,
			signatures: PromiseOrValue<BytesLike>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<ContractTransaction>

		updateThreshold(
			_threshold: PromiseOrValue<BigNumberish>,
			expiration: PromiseOrValue<BigNumberish>,
			signatures: PromiseOrValue<BytesLike>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<ContractTransaction>

		verifySignatures(
			_hash: PromiseOrValue<BytesLike>,
			expiration: PromiseOrValue<BigNumberish>,
			signatures: PromiseOrValue<BytesLike>,
			overrides?: CallOverrides,
		): Promise<[boolean]>
	}

	addSigner(
		_address: PromiseOrValue<string>,
		expiration: PromiseOrValue<BigNumberish>,
		signatures: PromiseOrValue<BytesLike>,
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): Promise<ContractTransaction>

	createSidechainERC721(
		sidechainId: PromiseOrValue<BigNumberish>,
		mainchainId: PromiseOrValue<BigNumberish>,
		mainERC721: PromiseOrValue<string>,
		name: PromiseOrValue<string>,
		symbol: PromiseOrValue<string>,
		expiration: PromiseOrValue<BigNumberish>,
		signatures: PromiseOrValue<BytesLike>,
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): Promise<ContractTransaction>

	finalizeDeposit(
		sidechainId: PromiseOrValue<BigNumberish>,
		mainchainId: PromiseOrValue<BigNumberish>,
		depositIndex: PromiseOrValue<BigNumberish>,
		mainERC721: PromiseOrValue<string>,
		tokenId: PromiseOrValue<BigNumberish>,
		mainFrom: PromiseOrValue<string>,
		sideTo: PromiseOrValue<string>,
		expiration: PromiseOrValue<BigNumberish>,
		signatures: PromiseOrValue<BytesLike>,
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): Promise<ContractTransaction>

	finalizeWithdrawal(
		mainchainId: PromiseOrValue<BigNumberish>,
		depositIndex: PromiseOrValue<BigNumberish>,
		sidechainId: PromiseOrValue<BigNumberish>,
		withdrawalIndex: PromiseOrValue<BigNumberish>,
		sideFrom: PromiseOrValue<string>,
		mainTo: PromiseOrValue<string>,
		expiration: PromiseOrValue<BigNumberish>,
		signatures: PromiseOrValue<BytesLike>,
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): Promise<ContractTransaction>

	getSigners(overrides?: CallOverrides): Promise<string[]>

	mainchainBridge(overrides?: CallOverrides): Promise<string>

	nonce(overrides?: CallOverrides): Promise<BigNumber>

	rejectDeposit(
		mainchainId: PromiseOrValue<BigNumberish>,
		depositIndex: PromiseOrValue<BigNumberish>,
		expiration: PromiseOrValue<BigNumberish>,
		signatures: PromiseOrValue<BytesLike>,
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): Promise<ContractTransaction>

	rejectWithdrawal(
		sidechainId: PromiseOrValue<BigNumberish>,
		withdrawalIndex: PromiseOrValue<BigNumberish>,
		expiration: PromiseOrValue<BigNumberish>,
		signatures: PromiseOrValue<BytesLike>,
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): Promise<ContractTransaction>

	removeSigner(
		_address: PromiseOrValue<string>,
		expiration: PromiseOrValue<BigNumberish>,
		signatures: PromiseOrValue<BytesLike>,
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): Promise<ContractTransaction>

	sidechainBridge(overrides?: CallOverrides): Promise<string>

	threshold(overrides?: CallOverrides): Promise<BigNumber>

	transferMainchainRelayer(
		mainchainId: PromiseOrValue<BigNumberish>,
		newRelayer: PromiseOrValue<string>,
		expiration: PromiseOrValue<BigNumberish>,
		signatures: PromiseOrValue<BytesLike>,
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): Promise<ContractTransaction>

	transferSidechainRelayer(
		sidechainId: PromiseOrValue<BigNumberish>,
		newRelayer: PromiseOrValue<string>,
		expiration: PromiseOrValue<BigNumberish>,
		signatures: PromiseOrValue<BytesLike>,
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): Promise<ContractTransaction>

	updateThreshold(
		_threshold: PromiseOrValue<BigNumberish>,
		expiration: PromiseOrValue<BigNumberish>,
		signatures: PromiseOrValue<BytesLike>,
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): Promise<ContractTransaction>

	verifySignatures(
		_hash: PromiseOrValue<BytesLike>,
		expiration: PromiseOrValue<BigNumberish>,
		signatures: PromiseOrValue<BytesLike>,
		overrides?: CallOverrides,
	): Promise<boolean>

	callStatic: {
		addSigner(
			_address: PromiseOrValue<string>,
			expiration: PromiseOrValue<BigNumberish>,
			signatures: PromiseOrValue<BytesLike>,
			overrides?: CallOverrides,
		): Promise<void>

		createSidechainERC721(
			sidechainId: PromiseOrValue<BigNumberish>,
			mainchainId: PromiseOrValue<BigNumberish>,
			mainERC721: PromiseOrValue<string>,
			name: PromiseOrValue<string>,
			symbol: PromiseOrValue<string>,
			expiration: PromiseOrValue<BigNumberish>,
			signatures: PromiseOrValue<BytesLike>,
			overrides?: CallOverrides,
		): Promise<void>

		finalizeDeposit(
			sidechainId: PromiseOrValue<BigNumberish>,
			mainchainId: PromiseOrValue<BigNumberish>,
			depositIndex: PromiseOrValue<BigNumberish>,
			mainERC721: PromiseOrValue<string>,
			tokenId: PromiseOrValue<BigNumberish>,
			mainFrom: PromiseOrValue<string>,
			sideTo: PromiseOrValue<string>,
			expiration: PromiseOrValue<BigNumberish>,
			signatures: PromiseOrValue<BytesLike>,
			overrides?: CallOverrides,
		): Promise<void>

		finalizeWithdrawal(
			mainchainId: PromiseOrValue<BigNumberish>,
			depositIndex: PromiseOrValue<BigNumberish>,
			sidechainId: PromiseOrValue<BigNumberish>,
			withdrawalIndex: PromiseOrValue<BigNumberish>,
			sideFrom: PromiseOrValue<string>,
			mainTo: PromiseOrValue<string>,
			expiration: PromiseOrValue<BigNumberish>,
			signatures: PromiseOrValue<BytesLike>,
			overrides?: CallOverrides,
		): Promise<void>

		getSigners(overrides?: CallOverrides): Promise<string[]>

		mainchainBridge(overrides?: CallOverrides): Promise<string>

		nonce(overrides?: CallOverrides): Promise<BigNumber>

		rejectDeposit(
			mainchainId: PromiseOrValue<BigNumberish>,
			depositIndex: PromiseOrValue<BigNumberish>,
			expiration: PromiseOrValue<BigNumberish>,
			signatures: PromiseOrValue<BytesLike>,
			overrides?: CallOverrides,
		): Promise<void>

		rejectWithdrawal(
			sidechainId: PromiseOrValue<BigNumberish>,
			withdrawalIndex: PromiseOrValue<BigNumberish>,
			expiration: PromiseOrValue<BigNumberish>,
			signatures: PromiseOrValue<BytesLike>,
			overrides?: CallOverrides,
		): Promise<void>

		removeSigner(
			_address: PromiseOrValue<string>,
			expiration: PromiseOrValue<BigNumberish>,
			signatures: PromiseOrValue<BytesLike>,
			overrides?: CallOverrides,
		): Promise<void>

		sidechainBridge(overrides?: CallOverrides): Promise<string>

		threshold(overrides?: CallOverrides): Promise<BigNumber>

		transferMainchainRelayer(
			mainchainId: PromiseOrValue<BigNumberish>,
			newRelayer: PromiseOrValue<string>,
			expiration: PromiseOrValue<BigNumberish>,
			signatures: PromiseOrValue<BytesLike>,
			overrides?: CallOverrides,
		): Promise<void>

		transferSidechainRelayer(
			sidechainId: PromiseOrValue<BigNumberish>,
			newRelayer: PromiseOrValue<string>,
			expiration: PromiseOrValue<BigNumberish>,
			signatures: PromiseOrValue<BytesLike>,
			overrides?: CallOverrides,
		): Promise<void>

		updateThreshold(
			_threshold: PromiseOrValue<BigNumberish>,
			expiration: PromiseOrValue<BigNumberish>,
			signatures: PromiseOrValue<BytesLike>,
			overrides?: CallOverrides,
		): Promise<void>

		verifySignatures(
			_hash: PromiseOrValue<BytesLike>,
			expiration: PromiseOrValue<BigNumberish>,
			signatures: PromiseOrValue<BytesLike>,
			overrides?: CallOverrides,
		): Promise<boolean>
	}

	filters: {
		'SignerAdded(address)'(_address?: PromiseOrValue<string> | null): SignerAddedEventFilter
		SignerAdded(_address?: PromiseOrValue<string> | null): SignerAddedEventFilter

		'SignerRemoved(address)'(_address?: PromiseOrValue<string> | null): SignerRemovedEventFilter
		SignerRemoved(_address?: PromiseOrValue<string> | null): SignerRemovedEventFilter

		'ThresholdUpdated(uint256)'(
			_threshold?: PromiseOrValue<BigNumberish> | null,
		): ThresholdUpdatedEventFilter
		ThresholdUpdated(
			_threshold?: PromiseOrValue<BigNumberish> | null,
		): ThresholdUpdatedEventFilter
	}

	estimateGas: {
		addSigner(
			_address: PromiseOrValue<string>,
			expiration: PromiseOrValue<BigNumberish>,
			signatures: PromiseOrValue<BytesLike>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<BigNumber>

		createSidechainERC721(
			sidechainId: PromiseOrValue<BigNumberish>,
			mainchainId: PromiseOrValue<BigNumberish>,
			mainERC721: PromiseOrValue<string>,
			name: PromiseOrValue<string>,
			symbol: PromiseOrValue<string>,
			expiration: PromiseOrValue<BigNumberish>,
			signatures: PromiseOrValue<BytesLike>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<BigNumber>

		finalizeDeposit(
			sidechainId: PromiseOrValue<BigNumberish>,
			mainchainId: PromiseOrValue<BigNumberish>,
			depositIndex: PromiseOrValue<BigNumberish>,
			mainERC721: PromiseOrValue<string>,
			tokenId: PromiseOrValue<BigNumberish>,
			mainFrom: PromiseOrValue<string>,
			sideTo: PromiseOrValue<string>,
			expiration: PromiseOrValue<BigNumberish>,
			signatures: PromiseOrValue<BytesLike>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<BigNumber>

		finalizeWithdrawal(
			mainchainId: PromiseOrValue<BigNumberish>,
			depositIndex: PromiseOrValue<BigNumberish>,
			sidechainId: PromiseOrValue<BigNumberish>,
			withdrawalIndex: PromiseOrValue<BigNumberish>,
			sideFrom: PromiseOrValue<string>,
			mainTo: PromiseOrValue<string>,
			expiration: PromiseOrValue<BigNumberish>,
			signatures: PromiseOrValue<BytesLike>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<BigNumber>

		getSigners(overrides?: CallOverrides): Promise<BigNumber>

		mainchainBridge(overrides?: CallOverrides): Promise<BigNumber>

		nonce(overrides?: CallOverrides): Promise<BigNumber>

		rejectDeposit(
			mainchainId: PromiseOrValue<BigNumberish>,
			depositIndex: PromiseOrValue<BigNumberish>,
			expiration: PromiseOrValue<BigNumberish>,
			signatures: PromiseOrValue<BytesLike>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<BigNumber>

		rejectWithdrawal(
			sidechainId: PromiseOrValue<BigNumberish>,
			withdrawalIndex: PromiseOrValue<BigNumberish>,
			expiration: PromiseOrValue<BigNumberish>,
			signatures: PromiseOrValue<BytesLike>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<BigNumber>

		removeSigner(
			_address: PromiseOrValue<string>,
			expiration: PromiseOrValue<BigNumberish>,
			signatures: PromiseOrValue<BytesLike>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<BigNumber>

		sidechainBridge(overrides?: CallOverrides): Promise<BigNumber>

		threshold(overrides?: CallOverrides): Promise<BigNumber>

		transferMainchainRelayer(
			mainchainId: PromiseOrValue<BigNumberish>,
			newRelayer: PromiseOrValue<string>,
			expiration: PromiseOrValue<BigNumberish>,
			signatures: PromiseOrValue<BytesLike>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<BigNumber>

		transferSidechainRelayer(
			sidechainId: PromiseOrValue<BigNumberish>,
			newRelayer: PromiseOrValue<string>,
			expiration: PromiseOrValue<BigNumberish>,
			signatures: PromiseOrValue<BytesLike>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<BigNumber>

		updateThreshold(
			_threshold: PromiseOrValue<BigNumberish>,
			expiration: PromiseOrValue<BigNumberish>,
			signatures: PromiseOrValue<BytesLike>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<BigNumber>

		verifySignatures(
			_hash: PromiseOrValue<BytesLike>,
			expiration: PromiseOrValue<BigNumberish>,
			signatures: PromiseOrValue<BytesLike>,
			overrides?: CallOverrides,
		): Promise<BigNumber>
	}

	populateTransaction: {
		addSigner(
			_address: PromiseOrValue<string>,
			expiration: PromiseOrValue<BigNumberish>,
			signatures: PromiseOrValue<BytesLike>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<PopulatedTransaction>

		createSidechainERC721(
			sidechainId: PromiseOrValue<BigNumberish>,
			mainchainId: PromiseOrValue<BigNumberish>,
			mainERC721: PromiseOrValue<string>,
			name: PromiseOrValue<string>,
			symbol: PromiseOrValue<string>,
			expiration: PromiseOrValue<BigNumberish>,
			signatures: PromiseOrValue<BytesLike>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<PopulatedTransaction>

		finalizeDeposit(
			sidechainId: PromiseOrValue<BigNumberish>,
			mainchainId: PromiseOrValue<BigNumberish>,
			depositIndex: PromiseOrValue<BigNumberish>,
			mainERC721: PromiseOrValue<string>,
			tokenId: PromiseOrValue<BigNumberish>,
			mainFrom: PromiseOrValue<string>,
			sideTo: PromiseOrValue<string>,
			expiration: PromiseOrValue<BigNumberish>,
			signatures: PromiseOrValue<BytesLike>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<PopulatedTransaction>

		finalizeWithdrawal(
			mainchainId: PromiseOrValue<BigNumberish>,
			depositIndex: PromiseOrValue<BigNumberish>,
			sidechainId: PromiseOrValue<BigNumberish>,
			withdrawalIndex: PromiseOrValue<BigNumberish>,
			sideFrom: PromiseOrValue<string>,
			mainTo: PromiseOrValue<string>,
			expiration: PromiseOrValue<BigNumberish>,
			signatures: PromiseOrValue<BytesLike>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<PopulatedTransaction>

		getSigners(overrides?: CallOverrides): Promise<PopulatedTransaction>

		mainchainBridge(overrides?: CallOverrides): Promise<PopulatedTransaction>

		nonce(overrides?: CallOverrides): Promise<PopulatedTransaction>

		rejectDeposit(
			mainchainId: PromiseOrValue<BigNumberish>,
			depositIndex: PromiseOrValue<BigNumberish>,
			expiration: PromiseOrValue<BigNumberish>,
			signatures: PromiseOrValue<BytesLike>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<PopulatedTransaction>

		rejectWithdrawal(
			sidechainId: PromiseOrValue<BigNumberish>,
			withdrawalIndex: PromiseOrValue<BigNumberish>,
			expiration: PromiseOrValue<BigNumberish>,
			signatures: PromiseOrValue<BytesLike>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<PopulatedTransaction>

		removeSigner(
			_address: PromiseOrValue<string>,
			expiration: PromiseOrValue<BigNumberish>,
			signatures: PromiseOrValue<BytesLike>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<PopulatedTransaction>

		sidechainBridge(overrides?: CallOverrides): Promise<PopulatedTransaction>

		threshold(overrides?: CallOverrides): Promise<PopulatedTransaction>

		transferMainchainRelayer(
			mainchainId: PromiseOrValue<BigNumberish>,
			newRelayer: PromiseOrValue<string>,
			expiration: PromiseOrValue<BigNumberish>,
			signatures: PromiseOrValue<BytesLike>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<PopulatedTransaction>

		transferSidechainRelayer(
			sidechainId: PromiseOrValue<BigNumberish>,
			newRelayer: PromiseOrValue<string>,
			expiration: PromiseOrValue<BigNumberish>,
			signatures: PromiseOrValue<BytesLike>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<PopulatedTransaction>

		updateThreshold(
			_threshold: PromiseOrValue<BigNumberish>,
			expiration: PromiseOrValue<BigNumberish>,
			signatures: PromiseOrValue<BytesLike>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<PopulatedTransaction>

		verifySignatures(
			_hash: PromiseOrValue<BytesLike>,
			expiration: PromiseOrValue<BigNumberish>,
			signatures: PromiseOrValue<BytesLike>,
			overrides?: CallOverrides,
		): Promise<PopulatedTransaction>
	}
}
