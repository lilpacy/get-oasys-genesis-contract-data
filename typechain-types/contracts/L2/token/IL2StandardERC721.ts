/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
	BaseContract,
	BigNumber,
	BigNumberish,
	BytesLike,
	CallOverrides,
	ContractTransaction,
	Overrides,
	PopulatedTransaction,
	Signer,
	utils,
} from 'ethers'
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
	TypedEventFilter,
	TypedEvent,
	TypedListener,
	OnEvent,
	PromiseOrValue,
} from '../../../common'

export interface IL2StandardERC721Interface extends utils.Interface {
	functions: {
		'approve(address,uint256)': FunctionFragment
		'balanceOf(address)': FunctionFragment
		'burn(address,uint256)': FunctionFragment
		'getApproved(uint256)': FunctionFragment
		'isApprovedForAll(address,address)': FunctionFragment
		'l1Token()': FunctionFragment
		'mint(address,uint256)': FunctionFragment
		'ownerOf(uint256)': FunctionFragment
		'safeTransferFrom(address,address,uint256)': FunctionFragment
		'safeTransferFrom(address,address,uint256,bytes)': FunctionFragment
		'setApprovalForAll(address,bool)': FunctionFragment
		'supportsInterface(bytes4)': FunctionFragment
		'transferFrom(address,address,uint256)': FunctionFragment
	}

	getFunction(
		nameOrSignatureOrTopic:
			| 'approve'
			| 'balanceOf'
			| 'burn'
			| 'getApproved'
			| 'isApprovedForAll'
			| 'l1Token'
			| 'mint'
			| 'ownerOf'
			| 'safeTransferFrom(address,address,uint256)'
			| 'safeTransferFrom(address,address,uint256,bytes)'
			| 'setApprovalForAll'
			| 'supportsInterface'
			| 'transferFrom',
	): FunctionFragment

	encodeFunctionData(
		functionFragment: 'approve',
		values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
	): string
	encodeFunctionData(functionFragment: 'balanceOf', values: [PromiseOrValue<string>]): string
	encodeFunctionData(
		functionFragment: 'burn',
		values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
	): string
	encodeFunctionData(
		functionFragment: 'getApproved',
		values: [PromiseOrValue<BigNumberish>],
	): string
	encodeFunctionData(
		functionFragment: 'isApprovedForAll',
		values: [PromiseOrValue<string>, PromiseOrValue<string>],
	): string
	encodeFunctionData(functionFragment: 'l1Token', values?: undefined): string
	encodeFunctionData(
		functionFragment: 'mint',
		values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
	): string
	encodeFunctionData(functionFragment: 'ownerOf', values: [PromiseOrValue<BigNumberish>]): string
	encodeFunctionData(
		functionFragment: 'safeTransferFrom(address,address,uint256)',
		values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
	): string
	encodeFunctionData(
		functionFragment: 'safeTransferFrom(address,address,uint256,bytes)',
		values: [
			PromiseOrValue<string>,
			PromiseOrValue<string>,
			PromiseOrValue<BigNumberish>,
			PromiseOrValue<BytesLike>,
		],
	): string
	encodeFunctionData(
		functionFragment: 'setApprovalForAll',
		values: [PromiseOrValue<string>, PromiseOrValue<boolean>],
	): string
	encodeFunctionData(
		functionFragment: 'supportsInterface',
		values: [PromiseOrValue<BytesLike>],
	): string
	encodeFunctionData(
		functionFragment: 'transferFrom',
		values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
	): string

	decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'burn', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'getApproved', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'isApprovedForAll', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'l1Token', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'ownerOf', data: BytesLike): Result
	decodeFunctionResult(
		functionFragment: 'safeTransferFrom(address,address,uint256)',
		data: BytesLike,
	): Result
	decodeFunctionResult(
		functionFragment: 'safeTransferFrom(address,address,uint256,bytes)',
		data: BytesLike,
	): Result
	decodeFunctionResult(functionFragment: 'setApprovalForAll', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result

	events: {
		'Approval(address,address,uint256)': EventFragment
		'ApprovalForAll(address,address,bool)': EventFragment
		'L2BridgeBurn(address,uint256)': EventFragment
		'L2BridgeMint(address,uint256)': EventFragment
		'Transfer(address,address,uint256)': EventFragment
	}

	getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment
	getEvent(nameOrSignatureOrTopic: 'ApprovalForAll'): EventFragment
	getEvent(nameOrSignatureOrTopic: 'L2BridgeBurn'): EventFragment
	getEvent(nameOrSignatureOrTopic: 'L2BridgeMint'): EventFragment
	getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment
}

export interface ApprovalEventObject {
	owner: string
	approved: string
	tokenId: BigNumber
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>

export interface ApprovalForAllEventObject {
	owner: string
	operator: string
	approved: boolean
}
export type ApprovalForAllEvent = TypedEvent<[string, string, boolean], ApprovalForAllEventObject>

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>

export interface L2BridgeBurnEventObject {
	_account: string
	_tokenId: BigNumber
}
export type L2BridgeBurnEvent = TypedEvent<[string, BigNumber], L2BridgeBurnEventObject>

export type L2BridgeBurnEventFilter = TypedEventFilter<L2BridgeBurnEvent>

export interface L2BridgeMintEventObject {
	_account: string
	_tokenId: BigNumber
}
export type L2BridgeMintEvent = TypedEvent<[string, BigNumber], L2BridgeMintEventObject>

export type L2BridgeMintEventFilter = TypedEventFilter<L2BridgeMintEvent>

export interface TransferEventObject {
	from: string
	to: string
	tokenId: BigNumber
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>

export type TransferEventFilter = TypedEventFilter<TransferEvent>

export interface IL2StandardERC721 extends BaseContract {
	connect(signerOrProvider: Signer | Provider | string): this
	attach(addressOrName: string): this
	deployed(): Promise<this>

	interface: IL2StandardERC721Interface

	queryFilter<TEvent extends TypedEvent>(
		event: TypedEventFilter<TEvent>,
		fromBlockOrBlockhash?: string | number | undefined,
		toBlock?: string | number | undefined,
	): Promise<Array<TEvent>>

	listeners<TEvent extends TypedEvent>(
		eventFilter?: TypedEventFilter<TEvent>,
	): Array<TypedListener<TEvent>>
	listeners(eventName?: string): Array<Listener>
	removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
	removeAllListeners(eventName?: string): this
	off: OnEvent<this>
	on: OnEvent<this>
	once: OnEvent<this>
	removeListener: OnEvent<this>

	functions: {
		approve(
			to: PromiseOrValue<string>,
			tokenId: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<ContractTransaction>

		balanceOf(
			owner: PromiseOrValue<string>,
			overrides?: CallOverrides,
		): Promise<[BigNumber] & { balance: BigNumber }>

		burn(
			_from: PromiseOrValue<string>,
			_tokenId: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<ContractTransaction>

		getApproved(
			tokenId: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<[string] & { operator: string }>

		isApprovedForAll(
			owner: PromiseOrValue<string>,
			operator: PromiseOrValue<string>,
			overrides?: CallOverrides,
		): Promise<[boolean]>

		l1Token(
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<ContractTransaction>

		mint(
			_to: PromiseOrValue<string>,
			_tokenId: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<ContractTransaction>

		ownerOf(
			tokenId: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<[string] & { owner: string }>

		'safeTransferFrom(address,address,uint256)'(
			from: PromiseOrValue<string>,
			to: PromiseOrValue<string>,
			tokenId: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<ContractTransaction>

		'safeTransferFrom(address,address,uint256,bytes)'(
			from: PromiseOrValue<string>,
			to: PromiseOrValue<string>,
			tokenId: PromiseOrValue<BigNumberish>,
			data: PromiseOrValue<BytesLike>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<ContractTransaction>

		setApprovalForAll(
			operator: PromiseOrValue<string>,
			_approved: PromiseOrValue<boolean>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<ContractTransaction>

		supportsInterface(
			interfaceId: PromiseOrValue<BytesLike>,
			overrides?: CallOverrides,
		): Promise<[boolean]>

		transferFrom(
			from: PromiseOrValue<string>,
			to: PromiseOrValue<string>,
			tokenId: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<ContractTransaction>
	}

	approve(
		to: PromiseOrValue<string>,
		tokenId: PromiseOrValue<BigNumberish>,
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): Promise<ContractTransaction>

	balanceOf(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

	burn(
		_from: PromiseOrValue<string>,
		_tokenId: PromiseOrValue<BigNumberish>,
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): Promise<ContractTransaction>

	getApproved(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>

	isApprovedForAll(
		owner: PromiseOrValue<string>,
		operator: PromiseOrValue<string>,
		overrides?: CallOverrides,
	): Promise<boolean>

	l1Token(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

	mint(
		_to: PromiseOrValue<string>,
		_tokenId: PromiseOrValue<BigNumberish>,
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): Promise<ContractTransaction>

	ownerOf(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>

	'safeTransferFrom(address,address,uint256)'(
		from: PromiseOrValue<string>,
		to: PromiseOrValue<string>,
		tokenId: PromiseOrValue<BigNumberish>,
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): Promise<ContractTransaction>

	'safeTransferFrom(address,address,uint256,bytes)'(
		from: PromiseOrValue<string>,
		to: PromiseOrValue<string>,
		tokenId: PromiseOrValue<BigNumberish>,
		data: PromiseOrValue<BytesLike>,
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): Promise<ContractTransaction>

	setApprovalForAll(
		operator: PromiseOrValue<string>,
		_approved: PromiseOrValue<boolean>,
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): Promise<ContractTransaction>

	supportsInterface(
		interfaceId: PromiseOrValue<BytesLike>,
		overrides?: CallOverrides,
	): Promise<boolean>

	transferFrom(
		from: PromiseOrValue<string>,
		to: PromiseOrValue<string>,
		tokenId: PromiseOrValue<BigNumberish>,
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): Promise<ContractTransaction>

	callStatic: {
		approve(
			to: PromiseOrValue<string>,
			tokenId: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<void>

		balanceOf(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

		burn(
			_from: PromiseOrValue<string>,
			_tokenId: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<void>

		getApproved(
			tokenId: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<string>

		isApprovedForAll(
			owner: PromiseOrValue<string>,
			operator: PromiseOrValue<string>,
			overrides?: CallOverrides,
		): Promise<boolean>

		l1Token(overrides?: CallOverrides): Promise<string>

		mint(
			_to: PromiseOrValue<string>,
			_tokenId: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<void>

		ownerOf(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>

		'safeTransferFrom(address,address,uint256)'(
			from: PromiseOrValue<string>,
			to: PromiseOrValue<string>,
			tokenId: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<void>

		'safeTransferFrom(address,address,uint256,bytes)'(
			from: PromiseOrValue<string>,
			to: PromiseOrValue<string>,
			tokenId: PromiseOrValue<BigNumberish>,
			data: PromiseOrValue<BytesLike>,
			overrides?: CallOverrides,
		): Promise<void>

		setApprovalForAll(
			operator: PromiseOrValue<string>,
			_approved: PromiseOrValue<boolean>,
			overrides?: CallOverrides,
		): Promise<void>

		supportsInterface(
			interfaceId: PromiseOrValue<BytesLike>,
			overrides?: CallOverrides,
		): Promise<boolean>

		transferFrom(
			from: PromiseOrValue<string>,
			to: PromiseOrValue<string>,
			tokenId: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<void>
	}

	filters: {
		'Approval(address,address,uint256)'(
			owner?: PromiseOrValue<string> | null,
			approved?: PromiseOrValue<string> | null,
			tokenId?: PromiseOrValue<BigNumberish> | null,
		): ApprovalEventFilter
		Approval(
			owner?: PromiseOrValue<string> | null,
			approved?: PromiseOrValue<string> | null,
			tokenId?: PromiseOrValue<BigNumberish> | null,
		): ApprovalEventFilter

		'ApprovalForAll(address,address,bool)'(
			owner?: PromiseOrValue<string> | null,
			operator?: PromiseOrValue<string> | null,
			approved?: null,
		): ApprovalForAllEventFilter
		ApprovalForAll(
			owner?: PromiseOrValue<string> | null,
			operator?: PromiseOrValue<string> | null,
			approved?: null,
		): ApprovalForAllEventFilter

		'L2BridgeBurn(address,uint256)'(
			_account?: PromiseOrValue<string> | null,
			_tokenId?: null,
		): L2BridgeBurnEventFilter
		L2BridgeBurn(
			_account?: PromiseOrValue<string> | null,
			_tokenId?: null,
		): L2BridgeBurnEventFilter

		'L2BridgeMint(address,uint256)'(
			_account?: PromiseOrValue<string> | null,
			_tokenId?: null,
		): L2BridgeMintEventFilter
		L2BridgeMint(
			_account?: PromiseOrValue<string> | null,
			_tokenId?: null,
		): L2BridgeMintEventFilter

		'Transfer(address,address,uint256)'(
			from?: PromiseOrValue<string> | null,
			to?: PromiseOrValue<string> | null,
			tokenId?: PromiseOrValue<BigNumberish> | null,
		): TransferEventFilter
		Transfer(
			from?: PromiseOrValue<string> | null,
			to?: PromiseOrValue<string> | null,
			tokenId?: PromiseOrValue<BigNumberish> | null,
		): TransferEventFilter
	}

	estimateGas: {
		approve(
			to: PromiseOrValue<string>,
			tokenId: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<BigNumber>

		balanceOf(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

		burn(
			_from: PromiseOrValue<string>,
			_tokenId: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<BigNumber>

		getApproved(
			tokenId: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<BigNumber>

		isApprovedForAll(
			owner: PromiseOrValue<string>,
			operator: PromiseOrValue<string>,
			overrides?: CallOverrides,
		): Promise<BigNumber>

		l1Token(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

		mint(
			_to: PromiseOrValue<string>,
			_tokenId: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<BigNumber>

		ownerOf(
			tokenId: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<BigNumber>

		'safeTransferFrom(address,address,uint256)'(
			from: PromiseOrValue<string>,
			to: PromiseOrValue<string>,
			tokenId: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<BigNumber>

		'safeTransferFrom(address,address,uint256,bytes)'(
			from: PromiseOrValue<string>,
			to: PromiseOrValue<string>,
			tokenId: PromiseOrValue<BigNumberish>,
			data: PromiseOrValue<BytesLike>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<BigNumber>

		setApprovalForAll(
			operator: PromiseOrValue<string>,
			_approved: PromiseOrValue<boolean>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<BigNumber>

		supportsInterface(
			interfaceId: PromiseOrValue<BytesLike>,
			overrides?: CallOverrides,
		): Promise<BigNumber>

		transferFrom(
			from: PromiseOrValue<string>,
			to: PromiseOrValue<string>,
			tokenId: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<BigNumber>
	}

	populateTransaction: {
		approve(
			to: PromiseOrValue<string>,
			tokenId: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<PopulatedTransaction>

		balanceOf(
			owner: PromiseOrValue<string>,
			overrides?: CallOverrides,
		): Promise<PopulatedTransaction>

		burn(
			_from: PromiseOrValue<string>,
			_tokenId: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<PopulatedTransaction>

		getApproved(
			tokenId: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<PopulatedTransaction>

		isApprovedForAll(
			owner: PromiseOrValue<string>,
			operator: PromiseOrValue<string>,
			overrides?: CallOverrides,
		): Promise<PopulatedTransaction>

		l1Token(
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<PopulatedTransaction>

		mint(
			_to: PromiseOrValue<string>,
			_tokenId: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<PopulatedTransaction>

		ownerOf(
			tokenId: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<PopulatedTransaction>

		'safeTransferFrom(address,address,uint256)'(
			from: PromiseOrValue<string>,
			to: PromiseOrValue<string>,
			tokenId: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<PopulatedTransaction>

		'safeTransferFrom(address,address,uint256,bytes)'(
			from: PromiseOrValue<string>,
			to: PromiseOrValue<string>,
			tokenId: PromiseOrValue<BigNumberish>,
			data: PromiseOrValue<BytesLike>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<PopulatedTransaction>

		setApprovalForAll(
			operator: PromiseOrValue<string>,
			_approved: PromiseOrValue<boolean>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<PopulatedTransaction>

		supportsInterface(
			interfaceId: PromiseOrValue<BytesLike>,
			overrides?: CallOverrides,
		): Promise<PopulatedTransaction>

		transferFrom(
			from: PromiseOrValue<string>,
			to: PromiseOrValue<string>,
			tokenId: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<PopulatedTransaction>
	}
}
