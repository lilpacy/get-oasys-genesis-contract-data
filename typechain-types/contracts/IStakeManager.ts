/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
	BaseContract,
	BigNumber,
	BigNumberish,
	BytesLike,
	CallOverrides,
	ContractTransaction,
	Overrides,
	PayableOverrides,
	PopulatedTransaction,
	Signer,
	utils,
} from 'ethers'
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
	TypedEventFilter,
	TypedEvent,
	TypedListener,
	OnEvent,
	PromiseOrValue,
} from '../common'

export interface IStakeManagerInterface extends utils.Interface {
	functions: {
		'activateValidator(address,uint256[])': FunctionFragment
		'addRewardBalance()': FunctionFragment
		'claimCommissions(address,uint256)': FunctionFragment
		'claimLockedUnstake(uint256)': FunctionFragment
		'claimRewards(address,address,uint256)': FunctionFragment
		'claimUnstakes(address)': FunctionFragment
		'deactivateValidator(address,uint256[])': FunctionFragment
		'getBlockAndSlashes(address,uint256)': FunctionFragment
		'getCommissions(address,uint256)': FunctionFragment
		'getLockedUnstake(address,uint256)': FunctionFragment
		'getLockedUnstakeCount(address)': FunctionFragment
		'getLockedUnstakes(address,uint256,uint256)': FunctionFragment
		'getRewards(address,address,uint256)': FunctionFragment
		'getStakerStakes(address,uint256,uint256,uint256)': FunctionFragment
		'getStakers(uint256,uint256)': FunctionFragment
		'getTotalRewards(address[],uint256)': FunctionFragment
		'getTotalStake(uint256)': FunctionFragment
		'getUnstakes(address)': FunctionFragment
		'getValidatorInfo(address,uint256)': FunctionFragment
		'getValidatorOwners(uint256,uint256)': FunctionFragment
		'getValidatorStakes(address,uint256,uint256,uint256)': FunctionFragment
		'getValidators(uint256,uint256,uint256)': FunctionFragment
		'initialize(address,address)': FunctionFragment
		'joinValidator(address)': FunctionFragment
		'restakeCommissions(uint256)': FunctionFragment
		'restakeRewards(address,uint256)': FunctionFragment
		'slash(address,uint256)': FunctionFragment
		'stake(address,uint8,uint256)': FunctionFragment
		'unstake(address,uint8,uint256)': FunctionFragment
		'unstakeV2(address,uint8,uint256)': FunctionFragment
		'updateOperator(address)': FunctionFragment
	}

	getFunction(
		nameOrSignatureOrTopic:
			| 'activateValidator'
			| 'addRewardBalance'
			| 'claimCommissions'
			| 'claimLockedUnstake'
			| 'claimRewards'
			| 'claimUnstakes'
			| 'deactivateValidator'
			| 'getBlockAndSlashes'
			| 'getCommissions'
			| 'getLockedUnstake'
			| 'getLockedUnstakeCount'
			| 'getLockedUnstakes'
			| 'getRewards'
			| 'getStakerStakes'
			| 'getStakers'
			| 'getTotalRewards'
			| 'getTotalStake'
			| 'getUnstakes'
			| 'getValidatorInfo'
			| 'getValidatorOwners'
			| 'getValidatorStakes'
			| 'getValidators'
			| 'initialize'
			| 'joinValidator'
			| 'restakeCommissions'
			| 'restakeRewards'
			| 'slash'
			| 'stake'
			| 'unstake'
			| 'unstakeV2'
			| 'updateOperator',
	): FunctionFragment

	encodeFunctionData(
		functionFragment: 'activateValidator',
		values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>[]],
	): string
	encodeFunctionData(functionFragment: 'addRewardBalance', values?: undefined): string
	encodeFunctionData(
		functionFragment: 'claimCommissions',
		values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
	): string
	encodeFunctionData(
		functionFragment: 'claimLockedUnstake',
		values: [PromiseOrValue<BigNumberish>],
	): string
	encodeFunctionData(
		functionFragment: 'claimRewards',
		values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
	): string
	encodeFunctionData(functionFragment: 'claimUnstakes', values: [PromiseOrValue<string>]): string
	encodeFunctionData(
		functionFragment: 'deactivateValidator',
		values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>[]],
	): string
	encodeFunctionData(
		functionFragment: 'getBlockAndSlashes',
		values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
	): string
	encodeFunctionData(
		functionFragment: 'getCommissions',
		values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
	): string
	encodeFunctionData(
		functionFragment: 'getLockedUnstake',
		values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
	): string
	encodeFunctionData(
		functionFragment: 'getLockedUnstakeCount',
		values: [PromiseOrValue<string>],
	): string
	encodeFunctionData(
		functionFragment: 'getLockedUnstakes',
		values: [
			PromiseOrValue<string>,
			PromiseOrValue<BigNumberish>,
			PromiseOrValue<BigNumberish>,
		],
	): string
	encodeFunctionData(
		functionFragment: 'getRewards',
		values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
	): string
	encodeFunctionData(
		functionFragment: 'getStakerStakes',
		values: [
			PromiseOrValue<string>,
			PromiseOrValue<BigNumberish>,
			PromiseOrValue<BigNumberish>,
			PromiseOrValue<BigNumberish>,
		],
	): string
	encodeFunctionData(
		functionFragment: 'getStakers',
		values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
	): string
	encodeFunctionData(
		functionFragment: 'getTotalRewards',
		values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>],
	): string
	encodeFunctionData(
		functionFragment: 'getTotalStake',
		values: [PromiseOrValue<BigNumberish>],
	): string
	encodeFunctionData(functionFragment: 'getUnstakes', values: [PromiseOrValue<string>]): string
	encodeFunctionData(
		functionFragment: 'getValidatorInfo',
		values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
	): string
	encodeFunctionData(
		functionFragment: 'getValidatorOwners',
		values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
	): string
	encodeFunctionData(
		functionFragment: 'getValidatorStakes',
		values: [
			PromiseOrValue<string>,
			PromiseOrValue<BigNumberish>,
			PromiseOrValue<BigNumberish>,
			PromiseOrValue<BigNumberish>,
		],
	): string
	encodeFunctionData(
		functionFragment: 'getValidators',
		values: [
			PromiseOrValue<BigNumberish>,
			PromiseOrValue<BigNumberish>,
			PromiseOrValue<BigNumberish>,
		],
	): string
	encodeFunctionData(
		functionFragment: 'initialize',
		values: [PromiseOrValue<string>, PromiseOrValue<string>],
	): string
	encodeFunctionData(functionFragment: 'joinValidator', values: [PromiseOrValue<string>]): string
	encodeFunctionData(
		functionFragment: 'restakeCommissions',
		values: [PromiseOrValue<BigNumberish>],
	): string
	encodeFunctionData(
		functionFragment: 'restakeRewards',
		values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
	): string
	encodeFunctionData(
		functionFragment: 'slash',
		values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
	): string
	encodeFunctionData(
		functionFragment: 'stake',
		values: [
			PromiseOrValue<string>,
			PromiseOrValue<BigNumberish>,
			PromiseOrValue<BigNumberish>,
		],
	): string
	encodeFunctionData(
		functionFragment: 'unstake',
		values: [
			PromiseOrValue<string>,
			PromiseOrValue<BigNumberish>,
			PromiseOrValue<BigNumberish>,
		],
	): string
	encodeFunctionData(
		functionFragment: 'unstakeV2',
		values: [
			PromiseOrValue<string>,
			PromiseOrValue<BigNumberish>,
			PromiseOrValue<BigNumberish>,
		],
	): string
	encodeFunctionData(functionFragment: 'updateOperator', values: [PromiseOrValue<string>]): string

	decodeFunctionResult(functionFragment: 'activateValidator', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'addRewardBalance', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'claimCommissions', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'claimLockedUnstake', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'claimRewards', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'claimUnstakes', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'deactivateValidator', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'getBlockAndSlashes', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'getCommissions', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'getLockedUnstake', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'getLockedUnstakeCount', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'getLockedUnstakes', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'getRewards', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'getStakerStakes', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'getStakers', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'getTotalRewards', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'getTotalStake', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'getUnstakes', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'getValidatorInfo', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'getValidatorOwners', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'getValidatorStakes', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'getValidators', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'joinValidator', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'restakeCommissions', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'restakeRewards', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'slash', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'stake', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'unstake', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'unstakeV2', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'updateOperator', data: BytesLike): Result

	events: {
		'AddedRewardBalance(uint256)': EventFragment
		'ClaimedCommissions(address,uint256)': EventFragment
		'ClaimedLockedUnstake(address,uint256)': EventFragment
		'ClaimedRewards(address,address,uint256)': EventFragment
		'OperatorUpdated(address,address,address)': EventFragment
		'ReStaked(address,address,uint256)': EventFragment
		'Staked(address,address,uint8,uint256)': EventFragment
		'Unstaked(address,address,uint8,uint256)': EventFragment
		'UnstakedV2(address,address,uint256)': EventFragment
		'ValidatorActivated(address,uint256[])': EventFragment
		'ValidatorDeactivated(address,uint256[])': EventFragment
		'ValidatorJailed(address,uint256)': EventFragment
		'ValidatorJoined(address)': EventFragment
		'ValidatorSlashed(address)': EventFragment
	}

	getEvent(nameOrSignatureOrTopic: 'AddedRewardBalance'): EventFragment
	getEvent(nameOrSignatureOrTopic: 'ClaimedCommissions'): EventFragment
	getEvent(nameOrSignatureOrTopic: 'ClaimedLockedUnstake'): EventFragment
	getEvent(nameOrSignatureOrTopic: 'ClaimedRewards'): EventFragment
	getEvent(nameOrSignatureOrTopic: 'OperatorUpdated'): EventFragment
	getEvent(nameOrSignatureOrTopic: 'ReStaked'): EventFragment
	getEvent(nameOrSignatureOrTopic: 'Staked'): EventFragment
	getEvent(nameOrSignatureOrTopic: 'Unstaked'): EventFragment
	getEvent(nameOrSignatureOrTopic: 'UnstakedV2'): EventFragment
	getEvent(nameOrSignatureOrTopic: 'ValidatorActivated'): EventFragment
	getEvent(nameOrSignatureOrTopic: 'ValidatorDeactivated'): EventFragment
	getEvent(nameOrSignatureOrTopic: 'ValidatorJailed'): EventFragment
	getEvent(nameOrSignatureOrTopic: 'ValidatorJoined'): EventFragment
	getEvent(nameOrSignatureOrTopic: 'ValidatorSlashed'): EventFragment
}

export interface AddedRewardBalanceEventObject {
	amount: BigNumber
}
export type AddedRewardBalanceEvent = TypedEvent<[BigNumber], AddedRewardBalanceEventObject>

export type AddedRewardBalanceEventFilter = TypedEventFilter<AddedRewardBalanceEvent>

export interface ClaimedCommissionsEventObject {
	validator: string
	amount: BigNumber
}
export type ClaimedCommissionsEvent = TypedEvent<[string, BigNumber], ClaimedCommissionsEventObject>

export type ClaimedCommissionsEventFilter = TypedEventFilter<ClaimedCommissionsEvent>

export interface ClaimedLockedUnstakeEventObject {
	staker: string
	lockedUnstake: BigNumber
}
export type ClaimedLockedUnstakeEvent = TypedEvent<
	[string, BigNumber],
	ClaimedLockedUnstakeEventObject
>

export type ClaimedLockedUnstakeEventFilter = TypedEventFilter<ClaimedLockedUnstakeEvent>

export interface ClaimedRewardsEventObject {
	staker: string
	validator: string
	amount: BigNumber
}
export type ClaimedRewardsEvent = TypedEvent<[string, string, BigNumber], ClaimedRewardsEventObject>

export type ClaimedRewardsEventFilter = TypedEventFilter<ClaimedRewardsEvent>

export interface OperatorUpdatedEventObject {
	validator: string
	oldOperator: string
	newOperator: string
}
export type OperatorUpdatedEvent = TypedEvent<[string, string, string], OperatorUpdatedEventObject>

export type OperatorUpdatedEventFilter = TypedEventFilter<OperatorUpdatedEvent>

export interface ReStakedEventObject {
	staker: string
	validator: string
	amount: BigNumber
}
export type ReStakedEvent = TypedEvent<[string, string, BigNumber], ReStakedEventObject>

export type ReStakedEventFilter = TypedEventFilter<ReStakedEvent>

export interface StakedEventObject {
	staker: string
	validator: string
	token: number
	amount: BigNumber
}
export type StakedEvent = TypedEvent<[string, string, number, BigNumber], StakedEventObject>

export type StakedEventFilter = TypedEventFilter<StakedEvent>

export interface UnstakedEventObject {
	staker: string
	validator: string
	token: number
	amount: BigNumber
}
export type UnstakedEvent = TypedEvent<[string, string, number, BigNumber], UnstakedEventObject>

export type UnstakedEventFilter = TypedEventFilter<UnstakedEvent>

export interface UnstakedV2EventObject {
	staker: string
	validator: string
	lockedUnstake: BigNumber
}
export type UnstakedV2Event = TypedEvent<[string, string, BigNumber], UnstakedV2EventObject>

export type UnstakedV2EventFilter = TypedEventFilter<UnstakedV2Event>

export interface ValidatorActivatedEventObject {
	validator: string
	epochs: BigNumber[]
}
export type ValidatorActivatedEvent = TypedEvent<
	[string, BigNumber[]],
	ValidatorActivatedEventObject
>

export type ValidatorActivatedEventFilter = TypedEventFilter<ValidatorActivatedEvent>

export interface ValidatorDeactivatedEventObject {
	validator: string
	epochs: BigNumber[]
}
export type ValidatorDeactivatedEvent = TypedEvent<
	[string, BigNumber[]],
	ValidatorDeactivatedEventObject
>

export type ValidatorDeactivatedEventFilter = TypedEventFilter<ValidatorDeactivatedEvent>

export interface ValidatorJailedEventObject {
	validator: string
	until: BigNumber
}
export type ValidatorJailedEvent = TypedEvent<[string, BigNumber], ValidatorJailedEventObject>

export type ValidatorJailedEventFilter = TypedEventFilter<ValidatorJailedEvent>

export interface ValidatorJoinedEventObject {
	validator: string
}
export type ValidatorJoinedEvent = TypedEvent<[string], ValidatorJoinedEventObject>

export type ValidatorJoinedEventFilter = TypedEventFilter<ValidatorJoinedEvent>

export interface ValidatorSlashedEventObject {
	validator: string
}
export type ValidatorSlashedEvent = TypedEvent<[string], ValidatorSlashedEventObject>

export type ValidatorSlashedEventFilter = TypedEventFilter<ValidatorSlashedEvent>

export interface IStakeManager extends BaseContract {
	connect(signerOrProvider: Signer | Provider | string): this
	attach(addressOrName: string): this
	deployed(): Promise<this>

	interface: IStakeManagerInterface

	queryFilter<TEvent extends TypedEvent>(
		event: TypedEventFilter<TEvent>,
		fromBlockOrBlockhash?: string | number | undefined,
		toBlock?: string | number | undefined,
	): Promise<Array<TEvent>>

	listeners<TEvent extends TypedEvent>(
		eventFilter?: TypedEventFilter<TEvent>,
	): Array<TypedListener<TEvent>>
	listeners(eventName?: string): Array<Listener>
	removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
	removeAllListeners(eventName?: string): this
	off: OnEvent<this>
	on: OnEvent<this>
	once: OnEvent<this>
	removeListener: OnEvent<this>

	functions: {
		activateValidator(
			validator: PromiseOrValue<string>,
			epochs: PromiseOrValue<BigNumberish>[],
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<ContractTransaction>

		addRewardBalance(
			overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
		): Promise<ContractTransaction>

		claimCommissions(
			validator: PromiseOrValue<string>,
			epochs: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<ContractTransaction>

		claimLockedUnstake(
			lockedUnstake: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<ContractTransaction>

		claimRewards(
			staker: PromiseOrValue<string>,
			validator: PromiseOrValue<string>,
			epochs: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<ContractTransaction>

		claimUnstakes(
			staker: PromiseOrValue<string>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<ContractTransaction>

		deactivateValidator(
			validator: PromiseOrValue<string>,
			epochs: PromiseOrValue<BigNumberish>[],
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<ContractTransaction>

		getBlockAndSlashes(
			validator: PromiseOrValue<string>,
			epoch: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<[BigNumber, BigNumber] & { blocks: BigNumber; slashes: BigNumber }>

		getCommissions(
			validator: PromiseOrValue<string>,
			epochs: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<[BigNumber] & { commissions: BigNumber }>

		getLockedUnstake(
			staker: PromiseOrValue<string>,
			lockedUnstake: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<
			[number, BigNumber, BigNumber, boolean] & {
				token: number
				amount: BigNumber
				unlockTime: BigNumber
				claimable: boolean
			}
		>

		getLockedUnstakeCount(
			staker: PromiseOrValue<string>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<ContractTransaction>

		getLockedUnstakes(
			staker: PromiseOrValue<string>,
			cursor: PromiseOrValue<BigNumberish>,
			howMany: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<
			[number[], BigNumber[], BigNumber[], boolean[], BigNumber] & {
				tokens: number[]
				amounts: BigNumber[]
				unlockTimes: BigNumber[]
				claimable: boolean[]
				newCursor: BigNumber
			}
		>

		getRewards(
			staker: PromiseOrValue<string>,
			validator: PromiseOrValue<string>,
			epochs: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<[BigNumber] & { rewards: BigNumber }>

		getStakerStakes(
			staker: PromiseOrValue<string>,
			epoch: PromiseOrValue<BigNumberish>,
			cursor: PromiseOrValue<BigNumberish>,
			howMany: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<
			[string[], BigNumber[], BigNumber[], BigNumber[], BigNumber] & {
				validators: string[]
				oasStakes: BigNumber[]
				woasStakes: BigNumber[]
				soasStakes: BigNumber[]
				newCursor: BigNumber
			}
		>

		getStakers(
			cursor: PromiseOrValue<BigNumberish>,
			howMany: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<[string[], BigNumber] & { stakers: string[]; newCursor: BigNumber }>

		getTotalRewards(
			validators: PromiseOrValue<string>[],
			epochs: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<[BigNumber] & { rewards: BigNumber }>

		getTotalStake(
			epoch: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<[BigNumber] & { amounts: BigNumber }>

		getUnstakes(
			staker: PromiseOrValue<string>,
			overrides?: CallOverrides,
		): Promise<
			[BigNumber, BigNumber, BigNumber] & {
				oasUnstakes: BigNumber
				woasUnstakes: BigNumber
				soasUnstakes: BigNumber
			}
		>

		getValidatorInfo(
			validator: PromiseOrValue<string>,
			epoch: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<
			[string, boolean, boolean, boolean, BigNumber] & {
				operator: string
				active: boolean
				jailed: boolean
				candidate: boolean
				stakes: BigNumber
			}
		>

		getValidatorOwners(
			cursor: PromiseOrValue<BigNumberish>,
			howMany: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<[string[], BigNumber] & { owners: string[]; newCursor: BigNumber }>

		getValidatorStakes(
			validator: PromiseOrValue<string>,
			epoch: PromiseOrValue<BigNumberish>,
			cursor: PromiseOrValue<BigNumberish>,
			howMany: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<
			[string[], BigNumber[], BigNumber] & {
				stakers: string[]
				stakes: BigNumber[]
				newCursor: BigNumber
			}
		>

		getValidators(
			epoch: PromiseOrValue<BigNumberish>,
			cursor: PromiseOrValue<BigNumberish>,
			howMany: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<
			[string[], string[], BigNumber[], boolean[], BigNumber] & {
				owners: string[]
				operators: string[]
				stakes: BigNumber[]
				candidates: boolean[]
				newCursor: BigNumber
			}
		>

		initialize(
			_environment: PromiseOrValue<string>,
			_allowlist: PromiseOrValue<string>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<ContractTransaction>

		joinValidator(
			operator: PromiseOrValue<string>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<ContractTransaction>

		restakeCommissions(
			epochs: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<ContractTransaction>

		restakeRewards(
			validator: PromiseOrValue<string>,
			epochs: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<ContractTransaction>

		slash(
			operator: PromiseOrValue<string>,
			blocks: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<ContractTransaction>

		stake(
			validator: PromiseOrValue<string>,
			token: PromiseOrValue<BigNumberish>,
			amount: PromiseOrValue<BigNumberish>,
			overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
		): Promise<ContractTransaction>

		unstake(
			validator: PromiseOrValue<string>,
			token: PromiseOrValue<BigNumberish>,
			amount: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<ContractTransaction>

		unstakeV2(
			validator: PromiseOrValue<string>,
			token: PromiseOrValue<BigNumberish>,
			amount: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<ContractTransaction>

		updateOperator(
			operator: PromiseOrValue<string>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<ContractTransaction>
	}

	activateValidator(
		validator: PromiseOrValue<string>,
		epochs: PromiseOrValue<BigNumberish>[],
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): Promise<ContractTransaction>

	addRewardBalance(
		overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
	): Promise<ContractTransaction>

	claimCommissions(
		validator: PromiseOrValue<string>,
		epochs: PromiseOrValue<BigNumberish>,
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): Promise<ContractTransaction>

	claimLockedUnstake(
		lockedUnstake: PromiseOrValue<BigNumberish>,
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): Promise<ContractTransaction>

	claimRewards(
		staker: PromiseOrValue<string>,
		validator: PromiseOrValue<string>,
		epochs: PromiseOrValue<BigNumberish>,
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): Promise<ContractTransaction>

	claimUnstakes(
		staker: PromiseOrValue<string>,
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): Promise<ContractTransaction>

	deactivateValidator(
		validator: PromiseOrValue<string>,
		epochs: PromiseOrValue<BigNumberish>[],
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): Promise<ContractTransaction>

	getBlockAndSlashes(
		validator: PromiseOrValue<string>,
		epoch: PromiseOrValue<BigNumberish>,
		overrides?: CallOverrides,
	): Promise<[BigNumber, BigNumber] & { blocks: BigNumber; slashes: BigNumber }>

	getCommissions(
		validator: PromiseOrValue<string>,
		epochs: PromiseOrValue<BigNumberish>,
		overrides?: CallOverrides,
	): Promise<BigNumber>

	getLockedUnstake(
		staker: PromiseOrValue<string>,
		lockedUnstake: PromiseOrValue<BigNumberish>,
		overrides?: CallOverrides,
	): Promise<
		[number, BigNumber, BigNumber, boolean] & {
			token: number
			amount: BigNumber
			unlockTime: BigNumber
			claimable: boolean
		}
	>

	getLockedUnstakeCount(
		staker: PromiseOrValue<string>,
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): Promise<ContractTransaction>

	getLockedUnstakes(
		staker: PromiseOrValue<string>,
		cursor: PromiseOrValue<BigNumberish>,
		howMany: PromiseOrValue<BigNumberish>,
		overrides?: CallOverrides,
	): Promise<
		[number[], BigNumber[], BigNumber[], boolean[], BigNumber] & {
			tokens: number[]
			amounts: BigNumber[]
			unlockTimes: BigNumber[]
			claimable: boolean[]
			newCursor: BigNumber
		}
	>

	getRewards(
		staker: PromiseOrValue<string>,
		validator: PromiseOrValue<string>,
		epochs: PromiseOrValue<BigNumberish>,
		overrides?: CallOverrides,
	): Promise<BigNumber>

	getStakerStakes(
		staker: PromiseOrValue<string>,
		epoch: PromiseOrValue<BigNumberish>,
		cursor: PromiseOrValue<BigNumberish>,
		howMany: PromiseOrValue<BigNumberish>,
		overrides?: CallOverrides,
	): Promise<
		[string[], BigNumber[], BigNumber[], BigNumber[], BigNumber] & {
			validators: string[]
			oasStakes: BigNumber[]
			woasStakes: BigNumber[]
			soasStakes: BigNumber[]
			newCursor: BigNumber
		}
	>

	getStakers(
		cursor: PromiseOrValue<BigNumberish>,
		howMany: PromiseOrValue<BigNumberish>,
		overrides?: CallOverrides,
	): Promise<[string[], BigNumber] & { stakers: string[]; newCursor: BigNumber }>

	getTotalRewards(
		validators: PromiseOrValue<string>[],
		epochs: PromiseOrValue<BigNumberish>,
		overrides?: CallOverrides,
	): Promise<BigNumber>

	getTotalStake(
		epoch: PromiseOrValue<BigNumberish>,
		overrides?: CallOverrides,
	): Promise<BigNumber>

	getUnstakes(
		staker: PromiseOrValue<string>,
		overrides?: CallOverrides,
	): Promise<
		[BigNumber, BigNumber, BigNumber] & {
			oasUnstakes: BigNumber
			woasUnstakes: BigNumber
			soasUnstakes: BigNumber
		}
	>

	getValidatorInfo(
		validator: PromiseOrValue<string>,
		epoch: PromiseOrValue<BigNumberish>,
		overrides?: CallOverrides,
	): Promise<
		[string, boolean, boolean, boolean, BigNumber] & {
			operator: string
			active: boolean
			jailed: boolean
			candidate: boolean
			stakes: BigNumber
		}
	>

	getValidatorOwners(
		cursor: PromiseOrValue<BigNumberish>,
		howMany: PromiseOrValue<BigNumberish>,
		overrides?: CallOverrides,
	): Promise<[string[], BigNumber] & { owners: string[]; newCursor: BigNumber }>

	getValidatorStakes(
		validator: PromiseOrValue<string>,
		epoch: PromiseOrValue<BigNumberish>,
		cursor: PromiseOrValue<BigNumberish>,
		howMany: PromiseOrValue<BigNumberish>,
		overrides?: CallOverrides,
	): Promise<
		[string[], BigNumber[], BigNumber] & {
			stakers: string[]
			stakes: BigNumber[]
			newCursor: BigNumber
		}
	>

	getValidators(
		epoch: PromiseOrValue<BigNumberish>,
		cursor: PromiseOrValue<BigNumberish>,
		howMany: PromiseOrValue<BigNumberish>,
		overrides?: CallOverrides,
	): Promise<
		[string[], string[], BigNumber[], boolean[], BigNumber] & {
			owners: string[]
			operators: string[]
			stakes: BigNumber[]
			candidates: boolean[]
			newCursor: BigNumber
		}
	>

	initialize(
		_environment: PromiseOrValue<string>,
		_allowlist: PromiseOrValue<string>,
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): Promise<ContractTransaction>

	joinValidator(
		operator: PromiseOrValue<string>,
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): Promise<ContractTransaction>

	restakeCommissions(
		epochs: PromiseOrValue<BigNumberish>,
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): Promise<ContractTransaction>

	restakeRewards(
		validator: PromiseOrValue<string>,
		epochs: PromiseOrValue<BigNumberish>,
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): Promise<ContractTransaction>

	slash(
		operator: PromiseOrValue<string>,
		blocks: PromiseOrValue<BigNumberish>,
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): Promise<ContractTransaction>

	stake(
		validator: PromiseOrValue<string>,
		token: PromiseOrValue<BigNumberish>,
		amount: PromiseOrValue<BigNumberish>,
		overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
	): Promise<ContractTransaction>

	unstake(
		validator: PromiseOrValue<string>,
		token: PromiseOrValue<BigNumberish>,
		amount: PromiseOrValue<BigNumberish>,
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): Promise<ContractTransaction>

	unstakeV2(
		validator: PromiseOrValue<string>,
		token: PromiseOrValue<BigNumberish>,
		amount: PromiseOrValue<BigNumberish>,
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): Promise<ContractTransaction>

	updateOperator(
		operator: PromiseOrValue<string>,
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): Promise<ContractTransaction>

	callStatic: {
		activateValidator(
			validator: PromiseOrValue<string>,
			epochs: PromiseOrValue<BigNumberish>[],
			overrides?: CallOverrides,
		): Promise<void>

		addRewardBalance(overrides?: CallOverrides): Promise<void>

		claimCommissions(
			validator: PromiseOrValue<string>,
			epochs: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<void>

		claimLockedUnstake(
			lockedUnstake: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<void>

		claimRewards(
			staker: PromiseOrValue<string>,
			validator: PromiseOrValue<string>,
			epochs: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<void>

		claimUnstakes(staker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

		deactivateValidator(
			validator: PromiseOrValue<string>,
			epochs: PromiseOrValue<BigNumberish>[],
			overrides?: CallOverrides,
		): Promise<void>

		getBlockAndSlashes(
			validator: PromiseOrValue<string>,
			epoch: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<[BigNumber, BigNumber] & { blocks: BigNumber; slashes: BigNumber }>

		getCommissions(
			validator: PromiseOrValue<string>,
			epochs: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<BigNumber>

		getLockedUnstake(
			staker: PromiseOrValue<string>,
			lockedUnstake: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<
			[number, BigNumber, BigNumber, boolean] & {
				token: number
				amount: BigNumber
				unlockTime: BigNumber
				claimable: boolean
			}
		>

		getLockedUnstakeCount(
			staker: PromiseOrValue<string>,
			overrides?: CallOverrides,
		): Promise<BigNumber>

		getLockedUnstakes(
			staker: PromiseOrValue<string>,
			cursor: PromiseOrValue<BigNumberish>,
			howMany: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<
			[number[], BigNumber[], BigNumber[], boolean[], BigNumber] & {
				tokens: number[]
				amounts: BigNumber[]
				unlockTimes: BigNumber[]
				claimable: boolean[]
				newCursor: BigNumber
			}
		>

		getRewards(
			staker: PromiseOrValue<string>,
			validator: PromiseOrValue<string>,
			epochs: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<BigNumber>

		getStakerStakes(
			staker: PromiseOrValue<string>,
			epoch: PromiseOrValue<BigNumberish>,
			cursor: PromiseOrValue<BigNumberish>,
			howMany: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<
			[string[], BigNumber[], BigNumber[], BigNumber[], BigNumber] & {
				validators: string[]
				oasStakes: BigNumber[]
				woasStakes: BigNumber[]
				soasStakes: BigNumber[]
				newCursor: BigNumber
			}
		>

		getStakers(
			cursor: PromiseOrValue<BigNumberish>,
			howMany: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<[string[], BigNumber] & { stakers: string[]; newCursor: BigNumber }>

		getTotalRewards(
			validators: PromiseOrValue<string>[],
			epochs: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<BigNumber>

		getTotalStake(
			epoch: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<BigNumber>

		getUnstakes(
			staker: PromiseOrValue<string>,
			overrides?: CallOverrides,
		): Promise<
			[BigNumber, BigNumber, BigNumber] & {
				oasUnstakes: BigNumber
				woasUnstakes: BigNumber
				soasUnstakes: BigNumber
			}
		>

		getValidatorInfo(
			validator: PromiseOrValue<string>,
			epoch: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<
			[string, boolean, boolean, boolean, BigNumber] & {
				operator: string
				active: boolean
				jailed: boolean
				candidate: boolean
				stakes: BigNumber
			}
		>

		getValidatorOwners(
			cursor: PromiseOrValue<BigNumberish>,
			howMany: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<[string[], BigNumber] & { owners: string[]; newCursor: BigNumber }>

		getValidatorStakes(
			validator: PromiseOrValue<string>,
			epoch: PromiseOrValue<BigNumberish>,
			cursor: PromiseOrValue<BigNumberish>,
			howMany: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<
			[string[], BigNumber[], BigNumber] & {
				stakers: string[]
				stakes: BigNumber[]
				newCursor: BigNumber
			}
		>

		getValidators(
			epoch: PromiseOrValue<BigNumberish>,
			cursor: PromiseOrValue<BigNumberish>,
			howMany: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<
			[string[], string[], BigNumber[], boolean[], BigNumber] & {
				owners: string[]
				operators: string[]
				stakes: BigNumber[]
				candidates: boolean[]
				newCursor: BigNumber
			}
		>

		initialize(
			_environment: PromiseOrValue<string>,
			_allowlist: PromiseOrValue<string>,
			overrides?: CallOverrides,
		): Promise<void>

		joinValidator(operator: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

		restakeCommissions(
			epochs: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<void>

		restakeRewards(
			validator: PromiseOrValue<string>,
			epochs: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<void>

		slash(
			operator: PromiseOrValue<string>,
			blocks: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<void>

		stake(
			validator: PromiseOrValue<string>,
			token: PromiseOrValue<BigNumberish>,
			amount: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<void>

		unstake(
			validator: PromiseOrValue<string>,
			token: PromiseOrValue<BigNumberish>,
			amount: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<void>

		unstakeV2(
			validator: PromiseOrValue<string>,
			token: PromiseOrValue<BigNumberish>,
			amount: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<void>

		updateOperator(operator: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>
	}

	filters: {
		'AddedRewardBalance(uint256)'(amount?: null): AddedRewardBalanceEventFilter
		AddedRewardBalance(amount?: null): AddedRewardBalanceEventFilter

		'ClaimedCommissions(address,uint256)'(
			validator?: PromiseOrValue<string> | null,
			amount?: null,
		): ClaimedCommissionsEventFilter
		ClaimedCommissions(
			validator?: PromiseOrValue<string> | null,
			amount?: null,
		): ClaimedCommissionsEventFilter

		'ClaimedLockedUnstake(address,uint256)'(
			staker?: PromiseOrValue<string> | null,
			lockedUnstake?: null,
		): ClaimedLockedUnstakeEventFilter
		ClaimedLockedUnstake(
			staker?: PromiseOrValue<string> | null,
			lockedUnstake?: null,
		): ClaimedLockedUnstakeEventFilter

		'ClaimedRewards(address,address,uint256)'(
			staker?: PromiseOrValue<string> | null,
			validator?: null,
			amount?: null,
		): ClaimedRewardsEventFilter
		ClaimedRewards(
			staker?: PromiseOrValue<string> | null,
			validator?: null,
			amount?: null,
		): ClaimedRewardsEventFilter

		'OperatorUpdated(address,address,address)'(
			validator?: PromiseOrValue<string> | null,
			oldOperator?: null,
			newOperator?: null,
		): OperatorUpdatedEventFilter
		OperatorUpdated(
			validator?: PromiseOrValue<string> | null,
			oldOperator?: null,
			newOperator?: null,
		): OperatorUpdatedEventFilter

		'ReStaked(address,address,uint256)'(
			staker?: PromiseOrValue<string> | null,
			validator?: PromiseOrValue<string> | null,
			amount?: null,
		): ReStakedEventFilter
		ReStaked(
			staker?: PromiseOrValue<string> | null,
			validator?: PromiseOrValue<string> | null,
			amount?: null,
		): ReStakedEventFilter

		'Staked(address,address,uint8,uint256)'(
			staker?: PromiseOrValue<string> | null,
			validator?: PromiseOrValue<string> | null,
			token?: null,
			amount?: null,
		): StakedEventFilter
		Staked(
			staker?: PromiseOrValue<string> | null,
			validator?: PromiseOrValue<string> | null,
			token?: null,
			amount?: null,
		): StakedEventFilter

		'Unstaked(address,address,uint8,uint256)'(
			staker?: PromiseOrValue<string> | null,
			validator?: PromiseOrValue<string> | null,
			token?: null,
			amount?: null,
		): UnstakedEventFilter
		Unstaked(
			staker?: PromiseOrValue<string> | null,
			validator?: PromiseOrValue<string> | null,
			token?: null,
			amount?: null,
		): UnstakedEventFilter

		'UnstakedV2(address,address,uint256)'(
			staker?: PromiseOrValue<string> | null,
			validator?: PromiseOrValue<string> | null,
			lockedUnstake?: null,
		): UnstakedV2EventFilter
		UnstakedV2(
			staker?: PromiseOrValue<string> | null,
			validator?: PromiseOrValue<string> | null,
			lockedUnstake?: null,
		): UnstakedV2EventFilter

		'ValidatorActivated(address,uint256[])'(
			validator?: PromiseOrValue<string> | null,
			epochs?: null,
		): ValidatorActivatedEventFilter
		ValidatorActivated(
			validator?: PromiseOrValue<string> | null,
			epochs?: null,
		): ValidatorActivatedEventFilter

		'ValidatorDeactivated(address,uint256[])'(
			validator?: PromiseOrValue<string> | null,
			epochs?: null,
		): ValidatorDeactivatedEventFilter
		ValidatorDeactivated(
			validator?: PromiseOrValue<string> | null,
			epochs?: null,
		): ValidatorDeactivatedEventFilter

		'ValidatorJailed(address,uint256)'(
			validator?: PromiseOrValue<string> | null,
			until?: null,
		): ValidatorJailedEventFilter
		ValidatorJailed(
			validator?: PromiseOrValue<string> | null,
			until?: null,
		): ValidatorJailedEventFilter

		'ValidatorJoined(address)'(validator?: null): ValidatorJoinedEventFilter
		ValidatorJoined(validator?: null): ValidatorJoinedEventFilter

		'ValidatorSlashed(address)'(
			validator?: PromiseOrValue<string> | null,
		): ValidatorSlashedEventFilter
		ValidatorSlashed(validator?: PromiseOrValue<string> | null): ValidatorSlashedEventFilter
	}

	estimateGas: {
		activateValidator(
			validator: PromiseOrValue<string>,
			epochs: PromiseOrValue<BigNumberish>[],
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<BigNumber>

		addRewardBalance(
			overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
		): Promise<BigNumber>

		claimCommissions(
			validator: PromiseOrValue<string>,
			epochs: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<BigNumber>

		claimLockedUnstake(
			lockedUnstake: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<BigNumber>

		claimRewards(
			staker: PromiseOrValue<string>,
			validator: PromiseOrValue<string>,
			epochs: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<BigNumber>

		claimUnstakes(
			staker: PromiseOrValue<string>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<BigNumber>

		deactivateValidator(
			validator: PromiseOrValue<string>,
			epochs: PromiseOrValue<BigNumberish>[],
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<BigNumber>

		getBlockAndSlashes(
			validator: PromiseOrValue<string>,
			epoch: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<BigNumber>

		getCommissions(
			validator: PromiseOrValue<string>,
			epochs: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<BigNumber>

		getLockedUnstake(
			staker: PromiseOrValue<string>,
			lockedUnstake: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<BigNumber>

		getLockedUnstakeCount(
			staker: PromiseOrValue<string>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<BigNumber>

		getLockedUnstakes(
			staker: PromiseOrValue<string>,
			cursor: PromiseOrValue<BigNumberish>,
			howMany: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<BigNumber>

		getRewards(
			staker: PromiseOrValue<string>,
			validator: PromiseOrValue<string>,
			epochs: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<BigNumber>

		getStakerStakes(
			staker: PromiseOrValue<string>,
			epoch: PromiseOrValue<BigNumberish>,
			cursor: PromiseOrValue<BigNumberish>,
			howMany: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<BigNumber>

		getStakers(
			cursor: PromiseOrValue<BigNumberish>,
			howMany: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<BigNumber>

		getTotalRewards(
			validators: PromiseOrValue<string>[],
			epochs: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<BigNumber>

		getTotalStake(
			epoch: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<BigNumber>

		getUnstakes(staker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

		getValidatorInfo(
			validator: PromiseOrValue<string>,
			epoch: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<BigNumber>

		getValidatorOwners(
			cursor: PromiseOrValue<BigNumberish>,
			howMany: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<BigNumber>

		getValidatorStakes(
			validator: PromiseOrValue<string>,
			epoch: PromiseOrValue<BigNumberish>,
			cursor: PromiseOrValue<BigNumberish>,
			howMany: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<BigNumber>

		getValidators(
			epoch: PromiseOrValue<BigNumberish>,
			cursor: PromiseOrValue<BigNumberish>,
			howMany: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<BigNumber>

		initialize(
			_environment: PromiseOrValue<string>,
			_allowlist: PromiseOrValue<string>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<BigNumber>

		joinValidator(
			operator: PromiseOrValue<string>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<BigNumber>

		restakeCommissions(
			epochs: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<BigNumber>

		restakeRewards(
			validator: PromiseOrValue<string>,
			epochs: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<BigNumber>

		slash(
			operator: PromiseOrValue<string>,
			blocks: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<BigNumber>

		stake(
			validator: PromiseOrValue<string>,
			token: PromiseOrValue<BigNumberish>,
			amount: PromiseOrValue<BigNumberish>,
			overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
		): Promise<BigNumber>

		unstake(
			validator: PromiseOrValue<string>,
			token: PromiseOrValue<BigNumberish>,
			amount: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<BigNumber>

		unstakeV2(
			validator: PromiseOrValue<string>,
			token: PromiseOrValue<BigNumberish>,
			amount: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<BigNumber>

		updateOperator(
			operator: PromiseOrValue<string>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<BigNumber>
	}

	populateTransaction: {
		activateValidator(
			validator: PromiseOrValue<string>,
			epochs: PromiseOrValue<BigNumberish>[],
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<PopulatedTransaction>

		addRewardBalance(
			overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
		): Promise<PopulatedTransaction>

		claimCommissions(
			validator: PromiseOrValue<string>,
			epochs: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<PopulatedTransaction>

		claimLockedUnstake(
			lockedUnstake: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<PopulatedTransaction>

		claimRewards(
			staker: PromiseOrValue<string>,
			validator: PromiseOrValue<string>,
			epochs: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<PopulatedTransaction>

		claimUnstakes(
			staker: PromiseOrValue<string>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<PopulatedTransaction>

		deactivateValidator(
			validator: PromiseOrValue<string>,
			epochs: PromiseOrValue<BigNumberish>[],
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<PopulatedTransaction>

		getBlockAndSlashes(
			validator: PromiseOrValue<string>,
			epoch: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<PopulatedTransaction>

		getCommissions(
			validator: PromiseOrValue<string>,
			epochs: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<PopulatedTransaction>

		getLockedUnstake(
			staker: PromiseOrValue<string>,
			lockedUnstake: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<PopulatedTransaction>

		getLockedUnstakeCount(
			staker: PromiseOrValue<string>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<PopulatedTransaction>

		getLockedUnstakes(
			staker: PromiseOrValue<string>,
			cursor: PromiseOrValue<BigNumberish>,
			howMany: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<PopulatedTransaction>

		getRewards(
			staker: PromiseOrValue<string>,
			validator: PromiseOrValue<string>,
			epochs: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<PopulatedTransaction>

		getStakerStakes(
			staker: PromiseOrValue<string>,
			epoch: PromiseOrValue<BigNumberish>,
			cursor: PromiseOrValue<BigNumberish>,
			howMany: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<PopulatedTransaction>

		getStakers(
			cursor: PromiseOrValue<BigNumberish>,
			howMany: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<PopulatedTransaction>

		getTotalRewards(
			validators: PromiseOrValue<string>[],
			epochs: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<PopulatedTransaction>

		getTotalStake(
			epoch: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<PopulatedTransaction>

		getUnstakes(
			staker: PromiseOrValue<string>,
			overrides?: CallOverrides,
		): Promise<PopulatedTransaction>

		getValidatorInfo(
			validator: PromiseOrValue<string>,
			epoch: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<PopulatedTransaction>

		getValidatorOwners(
			cursor: PromiseOrValue<BigNumberish>,
			howMany: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<PopulatedTransaction>

		getValidatorStakes(
			validator: PromiseOrValue<string>,
			epoch: PromiseOrValue<BigNumberish>,
			cursor: PromiseOrValue<BigNumberish>,
			howMany: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<PopulatedTransaction>

		getValidators(
			epoch: PromiseOrValue<BigNumberish>,
			cursor: PromiseOrValue<BigNumberish>,
			howMany: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<PopulatedTransaction>

		initialize(
			_environment: PromiseOrValue<string>,
			_allowlist: PromiseOrValue<string>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<PopulatedTransaction>

		joinValidator(
			operator: PromiseOrValue<string>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<PopulatedTransaction>

		restakeCommissions(
			epochs: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<PopulatedTransaction>

		restakeRewards(
			validator: PromiseOrValue<string>,
			epochs: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<PopulatedTransaction>

		slash(
			operator: PromiseOrValue<string>,
			blocks: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<PopulatedTransaction>

		stake(
			validator: PromiseOrValue<string>,
			token: PromiseOrValue<BigNumberish>,
			amount: PromiseOrValue<BigNumberish>,
			overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
		): Promise<PopulatedTransaction>

		unstake(
			validator: PromiseOrValue<string>,
			token: PromiseOrValue<BigNumberish>,
			amount: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<PopulatedTransaction>

		unstakeV2(
			validator: PromiseOrValue<string>,
			token: PromiseOrValue<BigNumberish>,
			amount: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<PopulatedTransaction>

		updateOperator(
			operator: PromiseOrValue<string>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<PopulatedTransaction>
	}
}
