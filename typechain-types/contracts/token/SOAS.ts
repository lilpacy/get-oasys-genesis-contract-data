/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
	BaseContract,
	BigNumber,
	BigNumberish,
	BytesLike,
	CallOverrides,
	ContractTransaction,
	Overrides,
	PayableOverrides,
	PopulatedTransaction,
	Signer,
	utils,
} from 'ethers'
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
	TypedEventFilter,
	TypedEvent,
	TypedListener,
	OnEvent,
	PromiseOrValue,
} from '../../common'

export interface SOASInterface extends utils.Interface {
	functions: {
		'allow(address,address[])': FunctionFragment
		'allow(address,address)': FunctionFragment
		'allowance(address,address)': FunctionFragment
		'allowedAddresses(uint256)': FunctionFragment
		'approve(address,uint256)': FunctionFragment
		'balanceOf(address)': FunctionFragment
		'claim(uint256)': FunctionFragment
		'claimInfo(address)': FunctionFragment
		'decimals()': FunctionFragment
		'decreaseAllowance(address,uint256)': FunctionFragment
		'getClaimableOAS(address)': FunctionFragment
		'increaseAllowance(address,uint256)': FunctionFragment
		'mint(address,uint64,uint64)': FunctionFragment
		'name()': FunctionFragment
		'originalClaimer(address)': FunctionFragment
		'renounce(uint256)': FunctionFragment
		'symbol()': FunctionFragment
		'totalSupply()': FunctionFragment
		'transfer(address,uint256)': FunctionFragment
		'transfer(address[],uint256[])': FunctionFragment
		'transferFrom(address,address,uint256)': FunctionFragment
		'transferFrom(address[],address[],uint256[])': FunctionFragment
	}

	getFunction(
		nameOrSignatureOrTopic:
			| 'allow(address,address[])'
			| 'allow(address,address)'
			| 'allowance'
			| 'allowedAddresses'
			| 'approve'
			| 'balanceOf'
			| 'claim'
			| 'claimInfo'
			| 'decimals'
			| 'decreaseAllowance'
			| 'getClaimableOAS'
			| 'increaseAllowance'
			| 'mint'
			| 'name'
			| 'originalClaimer'
			| 'renounce'
			| 'symbol'
			| 'totalSupply'
			| 'transfer(address,uint256)'
			| 'transfer(address[],uint256[])'
			| 'transferFrom(address,address,uint256)'
			| 'transferFrom(address[],address[],uint256[])',
	): FunctionFragment

	encodeFunctionData(
		functionFragment: 'allow(address,address[])',
		values: [PromiseOrValue<string>, PromiseOrValue<string>[]],
	): string
	encodeFunctionData(
		functionFragment: 'allow(address,address)',
		values: [PromiseOrValue<string>, PromiseOrValue<string>],
	): string
	encodeFunctionData(
		functionFragment: 'allowance',
		values: [PromiseOrValue<string>, PromiseOrValue<string>],
	): string
	encodeFunctionData(
		functionFragment: 'allowedAddresses',
		values: [PromiseOrValue<BigNumberish>],
	): string
	encodeFunctionData(
		functionFragment: 'approve',
		values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
	): string
	encodeFunctionData(functionFragment: 'balanceOf', values: [PromiseOrValue<string>]): string
	encodeFunctionData(functionFragment: 'claim', values: [PromiseOrValue<BigNumberish>]): string
	encodeFunctionData(functionFragment: 'claimInfo', values: [PromiseOrValue<string>]): string
	encodeFunctionData(functionFragment: 'decimals', values?: undefined): string
	encodeFunctionData(
		functionFragment: 'decreaseAllowance',
		values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
	): string
	encodeFunctionData(
		functionFragment: 'getClaimableOAS',
		values: [PromiseOrValue<string>],
	): string
	encodeFunctionData(
		functionFragment: 'increaseAllowance',
		values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
	): string
	encodeFunctionData(
		functionFragment: 'mint',
		values: [
			PromiseOrValue<string>,
			PromiseOrValue<BigNumberish>,
			PromiseOrValue<BigNumberish>,
		],
	): string
	encodeFunctionData(functionFragment: 'name', values?: undefined): string
	encodeFunctionData(
		functionFragment: 'originalClaimer',
		values: [PromiseOrValue<string>],
	): string
	encodeFunctionData(functionFragment: 'renounce', values: [PromiseOrValue<BigNumberish>]): string
	encodeFunctionData(functionFragment: 'symbol', values?: undefined): string
	encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string
	encodeFunctionData(
		functionFragment: 'transfer(address,uint256)',
		values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
	): string
	encodeFunctionData(
		functionFragment: 'transfer(address[],uint256[])',
		values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]],
	): string
	encodeFunctionData(
		functionFragment: 'transferFrom(address,address,uint256)',
		values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
	): string
	encodeFunctionData(
		functionFragment: 'transferFrom(address[],address[],uint256[])',
		values: [
			PromiseOrValue<string>[],
			PromiseOrValue<string>[],
			PromiseOrValue<BigNumberish>[],
		],
	): string

	decodeFunctionResult(functionFragment: 'allow(address,address[])', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'allow(address,address)', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'allowedAddresses', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'claim', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'claimInfo', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'decreaseAllowance', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'getClaimableOAS', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'increaseAllowance', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'originalClaimer', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'renounce', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'transfer(address,uint256)', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'transfer(address[],uint256[])', data: BytesLike): Result
	decodeFunctionResult(
		functionFragment: 'transferFrom(address,address,uint256)',
		data: BytesLike,
	): Result
	decodeFunctionResult(
		functionFragment: 'transferFrom(address[],address[],uint256[])',
		data: BytesLike,
	): Result

	events: {
		'Allow(address,address)': EventFragment
		'Approval(address,address,uint256)': EventFragment
		'Claim(address,uint256)': EventFragment
		'Mint(address,uint256,uint256,uint256)': EventFragment
		'Renounce(address,uint256)': EventFragment
		'Transfer(address,address,uint256)': EventFragment
	}

	getEvent(nameOrSignatureOrTopic: 'Allow'): EventFragment
	getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment
	getEvent(nameOrSignatureOrTopic: 'Claim'): EventFragment
	getEvent(nameOrSignatureOrTopic: 'Mint'): EventFragment
	getEvent(nameOrSignatureOrTopic: 'Renounce'): EventFragment
	getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment
}

export interface AllowEventObject {
	original: string
	transferable: string
}
export type AllowEvent = TypedEvent<[string, string], AllowEventObject>

export type AllowEventFilter = TypedEventFilter<AllowEvent>

export interface ApprovalEventObject {
	owner: string
	spender: string
	value: BigNumber
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>

export interface ClaimEventObject {
	holder: string
	amount: BigNumber
}
export type ClaimEvent = TypedEvent<[string, BigNumber], ClaimEventObject>

export type ClaimEventFilter = TypedEventFilter<ClaimEvent>

export interface MintEventObject {
	to: string
	amount: BigNumber
	since: BigNumber
	until: BigNumber
}
export type MintEvent = TypedEvent<[string, BigNumber, BigNumber, BigNumber], MintEventObject>

export type MintEventFilter = TypedEventFilter<MintEvent>

export interface RenounceEventObject {
	holder: string
	amount: BigNumber
}
export type RenounceEvent = TypedEvent<[string, BigNumber], RenounceEventObject>

export type RenounceEventFilter = TypedEventFilter<RenounceEvent>

export interface TransferEventObject {
	from: string
	to: string
	value: BigNumber
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>

export type TransferEventFilter = TypedEventFilter<TransferEvent>

export interface SOAS extends BaseContract {
	connect(signerOrProvider: Signer | Provider | string): this
	attach(addressOrName: string): this
	deployed(): Promise<this>

	interface: SOASInterface

	queryFilter<TEvent extends TypedEvent>(
		event: TypedEventFilter<TEvent>,
		fromBlockOrBlockhash?: string | number | undefined,
		toBlock?: string | number | undefined,
	): Promise<Array<TEvent>>

	listeners<TEvent extends TypedEvent>(
		eventFilter?: TypedEventFilter<TEvent>,
	): Array<TypedListener<TEvent>>
	listeners(eventName?: string): Array<Listener>
	removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
	removeAllListeners(eventName?: string): this
	off: OnEvent<this>
	on: OnEvent<this>
	once: OnEvent<this>
	removeListener: OnEvent<this>

	functions: {
		'allow(address,address[])'(
			original: PromiseOrValue<string>,
			alloweds: PromiseOrValue<string>[],
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<ContractTransaction>

		'allow(address,address)'(
			original: PromiseOrValue<string>,
			allowed: PromiseOrValue<string>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<ContractTransaction>

		allowance(
			owner: PromiseOrValue<string>,
			spender: PromiseOrValue<string>,
			overrides?: CallOverrides,
		): Promise<[BigNumber]>

		allowedAddresses(
			arg0: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<[string]>

		approve(
			spender: PromiseOrValue<string>,
			amount: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<ContractTransaction>

		balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>

		claim(
			amount: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<ContractTransaction>

		claimInfo(
			arg0: PromiseOrValue<string>,
			overrides?: CallOverrides,
		): Promise<
			[BigNumber, BigNumber, BigNumber, BigNumber, string] & {
				amount: BigNumber
				claimed: BigNumber
				since: BigNumber
				until: BigNumber
				from: string
			}
		>

		decimals(overrides?: CallOverrides): Promise<[number]>

		decreaseAllowance(
			spender: PromiseOrValue<string>,
			subtractedValue: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<ContractTransaction>

		getClaimableOAS(
			original: PromiseOrValue<string>,
			overrides?: CallOverrides,
		): Promise<[BigNumber]>

		increaseAllowance(
			spender: PromiseOrValue<string>,
			addedValue: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<ContractTransaction>

		mint(
			to: PromiseOrValue<string>,
			since: PromiseOrValue<BigNumberish>,
			until: PromiseOrValue<BigNumberish>,
			overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
		): Promise<ContractTransaction>

		name(overrides?: CallOverrides): Promise<[string]>

		originalClaimer(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>

		renounce(
			amount: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<ContractTransaction>

		symbol(overrides?: CallOverrides): Promise<[string]>

		totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>

		'transfer(address,uint256)'(
			to: PromiseOrValue<string>,
			amount: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<ContractTransaction>

		'transfer(address[],uint256[])'(
			tos: PromiseOrValue<string>[],
			amounts: PromiseOrValue<BigNumberish>[],
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<ContractTransaction>

		'transferFrom(address,address,uint256)'(
			from: PromiseOrValue<string>,
			to: PromiseOrValue<string>,
			amount: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<ContractTransaction>

		'transferFrom(address[],address[],uint256[])'(
			froms: PromiseOrValue<string>[],
			tos: PromiseOrValue<string>[],
			amounts: PromiseOrValue<BigNumberish>[],
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<ContractTransaction>
	}

	'allow(address,address[])'(
		original: PromiseOrValue<string>,
		alloweds: PromiseOrValue<string>[],
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): Promise<ContractTransaction>

	'allow(address,address)'(
		original: PromiseOrValue<string>,
		allowed: PromiseOrValue<string>,
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): Promise<ContractTransaction>

	allowance(
		owner: PromiseOrValue<string>,
		spender: PromiseOrValue<string>,
		overrides?: CallOverrides,
	): Promise<BigNumber>

	allowedAddresses(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>

	approve(
		spender: PromiseOrValue<string>,
		amount: PromiseOrValue<BigNumberish>,
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): Promise<ContractTransaction>

	balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

	claim(
		amount: PromiseOrValue<BigNumberish>,
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): Promise<ContractTransaction>

	claimInfo(
		arg0: PromiseOrValue<string>,
		overrides?: CallOverrides,
	): Promise<
		[BigNumber, BigNumber, BigNumber, BigNumber, string] & {
			amount: BigNumber
			claimed: BigNumber
			since: BigNumber
			until: BigNumber
			from: string
		}
	>

	decimals(overrides?: CallOverrides): Promise<number>

	decreaseAllowance(
		spender: PromiseOrValue<string>,
		subtractedValue: PromiseOrValue<BigNumberish>,
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): Promise<ContractTransaction>

	getClaimableOAS(original: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

	increaseAllowance(
		spender: PromiseOrValue<string>,
		addedValue: PromiseOrValue<BigNumberish>,
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): Promise<ContractTransaction>

	mint(
		to: PromiseOrValue<string>,
		since: PromiseOrValue<BigNumberish>,
		until: PromiseOrValue<BigNumberish>,
		overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
	): Promise<ContractTransaction>

	name(overrides?: CallOverrides): Promise<string>

	originalClaimer(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>

	renounce(
		amount: PromiseOrValue<BigNumberish>,
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): Promise<ContractTransaction>

	symbol(overrides?: CallOverrides): Promise<string>

	totalSupply(overrides?: CallOverrides): Promise<BigNumber>

	'transfer(address,uint256)'(
		to: PromiseOrValue<string>,
		amount: PromiseOrValue<BigNumberish>,
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): Promise<ContractTransaction>

	'transfer(address[],uint256[])'(
		tos: PromiseOrValue<string>[],
		amounts: PromiseOrValue<BigNumberish>[],
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): Promise<ContractTransaction>

	'transferFrom(address,address,uint256)'(
		from: PromiseOrValue<string>,
		to: PromiseOrValue<string>,
		amount: PromiseOrValue<BigNumberish>,
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): Promise<ContractTransaction>

	'transferFrom(address[],address[],uint256[])'(
		froms: PromiseOrValue<string>[],
		tos: PromiseOrValue<string>[],
		amounts: PromiseOrValue<BigNumberish>[],
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): Promise<ContractTransaction>

	callStatic: {
		'allow(address,address[])'(
			original: PromiseOrValue<string>,
			alloweds: PromiseOrValue<string>[],
			overrides?: CallOverrides,
		): Promise<void>

		'allow(address,address)'(
			original: PromiseOrValue<string>,
			allowed: PromiseOrValue<string>,
			overrides?: CallOverrides,
		): Promise<void>

		allowance(
			owner: PromiseOrValue<string>,
			spender: PromiseOrValue<string>,
			overrides?: CallOverrides,
		): Promise<BigNumber>

		allowedAddresses(
			arg0: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<string>

		approve(
			spender: PromiseOrValue<string>,
			amount: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<boolean>

		balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

		claim(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>

		claimInfo(
			arg0: PromiseOrValue<string>,
			overrides?: CallOverrides,
		): Promise<
			[BigNumber, BigNumber, BigNumber, BigNumber, string] & {
				amount: BigNumber
				claimed: BigNumber
				since: BigNumber
				until: BigNumber
				from: string
			}
		>

		decimals(overrides?: CallOverrides): Promise<number>

		decreaseAllowance(
			spender: PromiseOrValue<string>,
			subtractedValue: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<boolean>

		getClaimableOAS(
			original: PromiseOrValue<string>,
			overrides?: CallOverrides,
		): Promise<BigNumber>

		increaseAllowance(
			spender: PromiseOrValue<string>,
			addedValue: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<boolean>

		mint(
			to: PromiseOrValue<string>,
			since: PromiseOrValue<BigNumberish>,
			until: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<void>

		name(overrides?: CallOverrides): Promise<string>

		originalClaimer(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>

		renounce(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>

		symbol(overrides?: CallOverrides): Promise<string>

		totalSupply(overrides?: CallOverrides): Promise<BigNumber>

		'transfer(address,uint256)'(
			to: PromiseOrValue<string>,
			amount: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<boolean>

		'transfer(address[],uint256[])'(
			tos: PromiseOrValue<string>[],
			amounts: PromiseOrValue<BigNumberish>[],
			overrides?: CallOverrides,
		): Promise<boolean>

		'transferFrom(address,address,uint256)'(
			from: PromiseOrValue<string>,
			to: PromiseOrValue<string>,
			amount: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<boolean>

		'transferFrom(address[],address[],uint256[])'(
			froms: PromiseOrValue<string>[],
			tos: PromiseOrValue<string>[],
			amounts: PromiseOrValue<BigNumberish>[],
			overrides?: CallOverrides,
		): Promise<boolean>
	}

	filters: {
		'Allow(address,address)'(
			original?: PromiseOrValue<string> | null,
			transferable?: PromiseOrValue<string> | null,
		): AllowEventFilter
		Allow(
			original?: PromiseOrValue<string> | null,
			transferable?: PromiseOrValue<string> | null,
		): AllowEventFilter

		'Approval(address,address,uint256)'(
			owner?: PromiseOrValue<string> | null,
			spender?: PromiseOrValue<string> | null,
			value?: null,
		): ApprovalEventFilter
		Approval(
			owner?: PromiseOrValue<string> | null,
			spender?: PromiseOrValue<string> | null,
			value?: null,
		): ApprovalEventFilter

		'Claim(address,uint256)'(
			holder?: PromiseOrValue<string> | null,
			amount?: null,
		): ClaimEventFilter
		Claim(holder?: PromiseOrValue<string> | null, amount?: null): ClaimEventFilter

		'Mint(address,uint256,uint256,uint256)'(
			to?: PromiseOrValue<string> | null,
			amount?: null,
			since?: null,
			until?: null,
		): MintEventFilter
		Mint(
			to?: PromiseOrValue<string> | null,
			amount?: null,
			since?: null,
			until?: null,
		): MintEventFilter

		'Renounce(address,uint256)'(
			holder?: PromiseOrValue<string> | null,
			amount?: null,
		): RenounceEventFilter
		Renounce(holder?: PromiseOrValue<string> | null, amount?: null): RenounceEventFilter

		'Transfer(address,address,uint256)'(
			from?: PromiseOrValue<string> | null,
			to?: PromiseOrValue<string> | null,
			value?: null,
		): TransferEventFilter
		Transfer(
			from?: PromiseOrValue<string> | null,
			to?: PromiseOrValue<string> | null,
			value?: null,
		): TransferEventFilter
	}

	estimateGas: {
		'allow(address,address[])'(
			original: PromiseOrValue<string>,
			alloweds: PromiseOrValue<string>[],
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<BigNumber>

		'allow(address,address)'(
			original: PromiseOrValue<string>,
			allowed: PromiseOrValue<string>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<BigNumber>

		allowance(
			owner: PromiseOrValue<string>,
			spender: PromiseOrValue<string>,
			overrides?: CallOverrides,
		): Promise<BigNumber>

		allowedAddresses(
			arg0: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<BigNumber>

		approve(
			spender: PromiseOrValue<string>,
			amount: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<BigNumber>

		balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

		claim(
			amount: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<BigNumber>

		claimInfo(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

		decimals(overrides?: CallOverrides): Promise<BigNumber>

		decreaseAllowance(
			spender: PromiseOrValue<string>,
			subtractedValue: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<BigNumber>

		getClaimableOAS(
			original: PromiseOrValue<string>,
			overrides?: CallOverrides,
		): Promise<BigNumber>

		increaseAllowance(
			spender: PromiseOrValue<string>,
			addedValue: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<BigNumber>

		mint(
			to: PromiseOrValue<string>,
			since: PromiseOrValue<BigNumberish>,
			until: PromiseOrValue<BigNumberish>,
			overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
		): Promise<BigNumber>

		name(overrides?: CallOverrides): Promise<BigNumber>

		originalClaimer(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

		renounce(
			amount: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<BigNumber>

		symbol(overrides?: CallOverrides): Promise<BigNumber>

		totalSupply(overrides?: CallOverrides): Promise<BigNumber>

		'transfer(address,uint256)'(
			to: PromiseOrValue<string>,
			amount: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<BigNumber>

		'transfer(address[],uint256[])'(
			tos: PromiseOrValue<string>[],
			amounts: PromiseOrValue<BigNumberish>[],
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<BigNumber>

		'transferFrom(address,address,uint256)'(
			from: PromiseOrValue<string>,
			to: PromiseOrValue<string>,
			amount: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<BigNumber>

		'transferFrom(address[],address[],uint256[])'(
			froms: PromiseOrValue<string>[],
			tos: PromiseOrValue<string>[],
			amounts: PromiseOrValue<BigNumberish>[],
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<BigNumber>
	}

	populateTransaction: {
		'allow(address,address[])'(
			original: PromiseOrValue<string>,
			alloweds: PromiseOrValue<string>[],
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<PopulatedTransaction>

		'allow(address,address)'(
			original: PromiseOrValue<string>,
			allowed: PromiseOrValue<string>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<PopulatedTransaction>

		allowance(
			owner: PromiseOrValue<string>,
			spender: PromiseOrValue<string>,
			overrides?: CallOverrides,
		): Promise<PopulatedTransaction>

		allowedAddresses(
			arg0: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<PopulatedTransaction>

		approve(
			spender: PromiseOrValue<string>,
			amount: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<PopulatedTransaction>

		balanceOf(
			account: PromiseOrValue<string>,
			overrides?: CallOverrides,
		): Promise<PopulatedTransaction>

		claim(
			amount: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<PopulatedTransaction>

		claimInfo(
			arg0: PromiseOrValue<string>,
			overrides?: CallOverrides,
		): Promise<PopulatedTransaction>

		decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>

		decreaseAllowance(
			spender: PromiseOrValue<string>,
			subtractedValue: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<PopulatedTransaction>

		getClaimableOAS(
			original: PromiseOrValue<string>,
			overrides?: CallOverrides,
		): Promise<PopulatedTransaction>

		increaseAllowance(
			spender: PromiseOrValue<string>,
			addedValue: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<PopulatedTransaction>

		mint(
			to: PromiseOrValue<string>,
			since: PromiseOrValue<BigNumberish>,
			until: PromiseOrValue<BigNumberish>,
			overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
		): Promise<PopulatedTransaction>

		name(overrides?: CallOverrides): Promise<PopulatedTransaction>

		originalClaimer(
			arg0: PromiseOrValue<string>,
			overrides?: CallOverrides,
		): Promise<PopulatedTransaction>

		renounce(
			amount: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<PopulatedTransaction>

		symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>

		totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>

		'transfer(address,uint256)'(
			to: PromiseOrValue<string>,
			amount: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<PopulatedTransaction>

		'transfer(address[],uint256[])'(
			tos: PromiseOrValue<string>[],
			amounts: PromiseOrValue<BigNumberish>[],
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<PopulatedTransaction>

		'transferFrom(address,address,uint256)'(
			from: PromiseOrValue<string>,
			to: PromiseOrValue<string>,
			amount: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<PopulatedTransaction>

		'transferFrom(address[],address[],uint256[])'(
			froms: PromiseOrValue<string>[],
			tos: PromiseOrValue<string>[],
			amounts: PromiseOrValue<BigNumberish>[],
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<PopulatedTransaction>
	}
}
