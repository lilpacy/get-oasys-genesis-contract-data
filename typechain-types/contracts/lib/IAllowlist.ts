/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
	BaseContract,
	BigNumber,
	BytesLike,
	CallOverrides,
	ContractTransaction,
	Overrides,
	PopulatedTransaction,
	Signer,
	utils,
} from 'ethers'
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
	TypedEventFilter,
	TypedEvent,
	TypedListener,
	OnEvent,
	PromiseOrValue,
} from '../../common'

export interface IAllowlistInterface extends utils.Interface {
	functions: {
		'addAddress(address)': FunctionFragment
		'containsAddress(address)': FunctionFragment
		'getAllowlist()': FunctionFragment
		'removeAddress(address)': FunctionFragment
	}

	getFunction(
		nameOrSignatureOrTopic: 'addAddress' | 'containsAddress' | 'getAllowlist' | 'removeAddress',
	): FunctionFragment

	encodeFunctionData(functionFragment: 'addAddress', values: [PromiseOrValue<string>]): string
	encodeFunctionData(
		functionFragment: 'containsAddress',
		values: [PromiseOrValue<string>],
	): string
	encodeFunctionData(functionFragment: 'getAllowlist', values?: undefined): string
	encodeFunctionData(functionFragment: 'removeAddress', values: [PromiseOrValue<string>]): string

	decodeFunctionResult(functionFragment: 'addAddress', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'containsAddress', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'getAllowlist', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'removeAddress', data: BytesLike): Result

	events: {
		'AllowlistAdded(address)': EventFragment
		'AllowlistRemoved(address)': EventFragment
	}

	getEvent(nameOrSignatureOrTopic: 'AllowlistAdded'): EventFragment
	getEvent(nameOrSignatureOrTopic: 'AllowlistRemoved'): EventFragment
}

export interface AllowlistAddedEventObject {
	_address: string
}
export type AllowlistAddedEvent = TypedEvent<[string], AllowlistAddedEventObject>

export type AllowlistAddedEventFilter = TypedEventFilter<AllowlistAddedEvent>

export interface AllowlistRemovedEventObject {
	_address: string
}
export type AllowlistRemovedEvent = TypedEvent<[string], AllowlistRemovedEventObject>

export type AllowlistRemovedEventFilter = TypedEventFilter<AllowlistRemovedEvent>

export interface IAllowlist extends BaseContract {
	connect(signerOrProvider: Signer | Provider | string): this
	attach(addressOrName: string): this
	deployed(): Promise<this>

	interface: IAllowlistInterface

	queryFilter<TEvent extends TypedEvent>(
		event: TypedEventFilter<TEvent>,
		fromBlockOrBlockhash?: string | number | undefined,
		toBlock?: string | number | undefined,
	): Promise<Array<TEvent>>

	listeners<TEvent extends TypedEvent>(
		eventFilter?: TypedEventFilter<TEvent>,
	): Array<TypedListener<TEvent>>
	listeners(eventName?: string): Array<Listener>
	removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
	removeAllListeners(eventName?: string): this
	off: OnEvent<this>
	on: OnEvent<this>
	once: OnEvent<this>
	removeListener: OnEvent<this>

	functions: {
		addAddress(
			_address: PromiseOrValue<string>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<ContractTransaction>

		containsAddress(
			_address: PromiseOrValue<string>,
			overrides?: CallOverrides,
		): Promise<[boolean]>

		getAllowlist(overrides?: CallOverrides): Promise<[string[]]>

		removeAddress(
			_address: PromiseOrValue<string>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<ContractTransaction>
	}

	addAddress(
		_address: PromiseOrValue<string>,
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): Promise<ContractTransaction>

	containsAddress(_address: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>

	getAllowlist(overrides?: CallOverrides): Promise<string[]>

	removeAddress(
		_address: PromiseOrValue<string>,
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): Promise<ContractTransaction>

	callStatic: {
		addAddress(_address: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

		containsAddress(
			_address: PromiseOrValue<string>,
			overrides?: CallOverrides,
		): Promise<boolean>

		getAllowlist(overrides?: CallOverrides): Promise<string[]>

		removeAddress(_address: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>
	}

	filters: {
		'AllowlistAdded(address)'(
			_address?: PromiseOrValue<string> | null,
		): AllowlistAddedEventFilter
		AllowlistAdded(_address?: PromiseOrValue<string> | null): AllowlistAddedEventFilter

		'AllowlistRemoved(address)'(
			_address?: PromiseOrValue<string> | null,
		): AllowlistRemovedEventFilter
		AllowlistRemoved(_address?: PromiseOrValue<string> | null): AllowlistRemovedEventFilter
	}

	estimateGas: {
		addAddress(
			_address: PromiseOrValue<string>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<BigNumber>

		containsAddress(
			_address: PromiseOrValue<string>,
			overrides?: CallOverrides,
		): Promise<BigNumber>

		getAllowlist(overrides?: CallOverrides): Promise<BigNumber>

		removeAddress(
			_address: PromiseOrValue<string>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<BigNumber>
	}

	populateTransaction: {
		addAddress(
			_address: PromiseOrValue<string>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<PopulatedTransaction>

		containsAddress(
			_address: PromiseOrValue<string>,
			overrides?: CallOverrides,
		): Promise<PopulatedTransaction>

		getAllowlist(overrides?: CallOverrides): Promise<PopulatedTransaction>

		removeAddress(
			_address: PromiseOrValue<string>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<PopulatedTransaction>
	}
}
